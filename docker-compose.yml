services:
  db:
    image: postgres:15-alpine
    container_name: promina-test-db
    restart: always
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      # Port na hostu : Port u kontejneru
      # Koristimo 5433 da izbjegnemo konflikt s vašom postojećom bazom na 5432
      - "5433:5432"
    volumes:
      # Ovaj volumen će osigurati da se podaci u bazi sačuvaju između pokretanja
      # Možemo ga lako obrisati ako želimo potpuno svježi start
      - postgres_data:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: promina-test-backend
    restart: always
    depends_on:
      db:
        condition: service_healthy

    ports:
      # Izlažemo backend na portu 3001
      - "3001:3001"

    environment:
      # Povezujemo backend s bazom podataka unutar Docker mreže koristeći ime servisa 'db'
      PRISMA_DATABASE_URL: "postgresql://testuser:testpassword@db:5432/testdb?schema=public"
      SHADOW_DATABASE_URL: "postgresql://testuser:testpassword@db:5432/testdb_shadow?schema=public"
      # Postavljamo port na kojem backend sluša
      PORT: 3001
      NODE_ENV: development
      # Dodajemo varijable za inicijalnog system managera
      INITIAL_SYSTEM_MANAGER_USERNAME: "System Manager"
      INITIAL_SYSTEM_MANAGER_PASSWORD: "manager123"

volumes:
  postgres_data:
