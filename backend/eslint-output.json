[{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\prisma\\seed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\app.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\config\\auth.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\config\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\config\\jwt.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\config\\swagger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\activities.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\audit.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\auth.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\auth\\auth.handlers.core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\auth\\auth.handlers.member.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\auth\\auth.handlers.registration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\auth\\auth.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\auth\\login.handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\auth\\logout.handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\auth\\refreshToken.handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\cardnumber.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\member.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\member.message.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\memberProfile.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\memberStats.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\membership.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\message.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\permissions.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\settings.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\skillController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\controllers\\systemManager.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\init\\prepareDirectories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\jobs\\passwordUpdateJob.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\middleware\\authMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\middleware\\errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\middleware\\notFoundHandLer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\middleware\\performanceMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\middleware\\rateLimit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\middleware\\test-mode.middleware.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\middleware\\test-mode.middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\middleware\\validators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\activities.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\audit.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\auth.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\cardnumber.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\equipment.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\member.message.repository.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messageWithDetailsPayload' is assigned a value but only used as a type. Allowed unused vars must match /^_/u.","line":171,"column":15,"nodeType":null,"messageId":"usedOnlyAsType","endLine":171,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import prisma from '../utils/prisma.js';\nimport { getCurrentDate } from '../utils/dateUtils.js';\nimport { MemberMessage as PrismaMemberMessage, Prisma } from '@prisma/client'; // Importing Member type and Prisma types\nimport memberRepository from './member.repository.js';\n\nexport interface TransformedMessage {\n    /**\n     * Lista članova koji su pročitali poruku (za admin prikaz)\n     * Svaki objekt sadrži member_id i read_at (ako je pročitao)\n     */\n    read_by?: Array<{ member_id: number, read_at: Date | null, full_name: string | null }>;\n\n    message_id: number;\n    member_id: number | null;\n    message_text: string;\n    created_at: Date | null; // Dopuštamo null vrijednost za created_at\n    sender_id: number | null;\n    recipient_id: number | null;\n    recipient_type: PrismaMemberMessage['recipient_type'];\n    sender_type: PrismaMemberMessage['sender_type'];\n    currentUserStatus?: 'unread' | 'read' | 'archived';\n    currentUserReadAt?: Date | null;\n    sender?: {\n        member_id: number;\n        first_name: string | null;\n        last_name: string | null;\n        full_name: string | null;\n    } | null;\n}\n\n// Using shared prisma client\n\nconst memberMessageRepository = {\n    async findById(messageId: number): Promise<PrismaMemberMessage | null> {\n        // mapToMemberMessage će biti uklonjen ili refaktoriran\n        // Direktno vraćanje raw objekta ili prilagođeno mapiranje kasnije\n        return prisma.memberMessage.findUnique({\n            where: { message_id: messageId },\n        });\n    },\n\n    async create(memberId: number, messageText: string): Promise<TransformedMessage> {\n        // 1. Kreiraj osnovnu poruku\n        const newMessage = await prisma.memberMessage.create({\n            data: {\n                message_text: messageText,\n                sender_id: memberId,\n                sender_type: 'member',\n                recipient_type: 'member_administrator', // Poruka je namijenjena ulozi administratora\n                member_id: memberId, // Održavamo ovo polje kao u staroj logici, povezuje s MemberMessage.member\n            },\n        });\n\n        // 2. Dohvati sve administratore i superusere\n        const adminAndSuperUserRoles = ['member_administrator', 'member_superuser'];\n        const recipientMemberIds = await memberRepository.findMemberIdsByRoles(adminAndSuperUserRoles);\n        \n        // 3. Kreiraj MessageRecipientStatus za svakog primatelja\n        if (recipientMemberIds.length > 0) {\n            const recipientStatusData = recipientMemberIds.map(adminId => ({\n                message_id: newMessage.message_id,\n                recipient_member_id: adminId,\n                status: 'unread', // Inicijalno nepročitano\n            }));\n            await prisma.messageRecipientStatus.createMany({\n                data: recipientStatusData,\n            });\n        }\n        // Transformiraj poruku u TransformedMessage format s currentUserStatus i currentUserReadAt poljima\n        const transformedMessage: TransformedMessage = {\n            ...newMessage,\n            currentUserStatus: 'unread',\n            currentUserReadAt: null,\n            sender: null // Možemo dodati podatke o pošiljatelju ako je potrebno\n        };\n        \n        return transformedMessage;\n    },\n\n    async createAdminMessage({\n        senderId,\n        messageText,\n        recipientType = 'member',\n        senderType = 'member_administrator',\n        recipientId, // Koristi se samo ako je recipientType 'member'\n        recipientMemberIds: inputRecipientMemberIds, // Koristi se samo ako je recipientType 'group'\n    }: {\n        senderId: number;\n        messageText: string;\n        recipientType?: 'member' | 'group' | 'all';\n        senderType?: 'member_administrator' | 'member_superuser';\n        recipientId?: number;\n        recipientMemberIds?: number[];\n    }): Promise<TransformedMessage> {\n        const newMessage = await prisma.memberMessage.create({\n            data: {\n                message_text: messageText,\n                sender_id: senderId,\n                sender_type: senderType,\n                recipient_id: recipientType === 'member' ? recipientId : null, // recipient_id je ID člana za 'member', inače null\n                recipient_type: recipientType,\n            },\n        });\n\n        let finalRecipientIds: number[] = [];\n\n        if (recipientType === 'all') {\n            const allMembers = await memberRepository.findAllReceivableMemberIds(senderId);\n            finalRecipientIds = allMembers;\n        } else if (recipientType === 'group') {\n            if (!inputRecipientMemberIds || inputRecipientMemberIds.length === 0) {\n                throw new Error('Za grupnu poruku potrebno je navesti primatelje.');\n            }\n            finalRecipientIds = inputRecipientMemberIds.filter(id => id !== senderId);\n        } else if (recipientType === 'member' && recipientId) {\n            finalRecipientIds = [recipientId];\n        } else {\n            throw new Error('Nevažeći tip primatelja ili nedostaju ID-evi primatelja.');\n        }\n\n        if (finalRecipientIds.length > 0) {\n            const recipientStatusData = finalRecipientIds.map(memberId => ({\n                message_id: newMessage.message_id,\n                recipient_member_id: memberId,\n                status: 'unread', // Inicijalno nepročitano\n            }));\n            await prisma.messageRecipientStatus.createMany({\n                data: recipientStatusData,\n                skipDuplicates: true, // Ignoriraj duplikate ako postoje\n            });\n        }\n\n        // Transformiraj poruku u TransformedMessage format\n        const transformedMessage: TransformedMessage = {\n            ...newMessage,\n            currentUserStatus: 'unread',\n            currentUserReadAt: null,\n            sender: null // Možemo dodati podatke o pošiljatelju ako je potrebno\n        };\n        \n        return transformedMessage;\n    },\n\n    async getAllForAdmin(currentMemberId: number): Promise<TransformedMessage[]> {\n        const messagesData = await prisma.memberMessage.findMany({\n            where: {\n                // Dohvati poruke za koje postoji status za trenutnog korisnika\n                recipient_statuses: {\n                    some: {\n                        recipient_member_id: currentMemberId,\n                        // Opcionalno: filtriraj da se ne prikazuju arhivirane poruke ovdje\n                        // status: { not: 'archived' }\n                    },\n                },\n            },\n            include: {\n                sender: { // Podaci o pošiljatelju\n                    select: { member_id: true, first_name: true, last_name: true, full_name: true },\n                },\n                recipient_statuses: { // Statusi za trenutnog korisnika\n                    where: { recipient_member_id: currentMemberId },\n                    select: { status: true, read_at: true },\n                },\n                // Opcionalno: ako želimo znati sve primatelje poruke (npr. za prikaz 'All Members' ili liste grupe)\n                // _count: { select: { recipient_statuses: true } } // Ukupan broj primatelja ove poruke\n            },\n            orderBy: { created_at: 'desc' },\n        });\n\n        // Definiranje tipa za payload s uključenim relacijama\n        const messageWithDetailsPayload = Prisma.validator<Prisma.MemberMessageDefaultArgs>()({\n          include: {\n            sender: { select: { member_id: true, first_name: true, last_name: true, full_name: true } },\n            recipient_statuses: { \n              where: { recipient_member_id: currentMemberId }, // Osiguravamo da je where ovdje\n              select: { status: true, read_at: true }\n            },\n          },\n        });\n        type MessageWithDetails = Prisma.MemberMessageGetPayload<typeof messageWithDetailsPayload>;\n\n        // Mapiranje rezultata\n        return (messagesData as MessageWithDetails[]).map((msg): TransformedMessage => {\n            const recipientStatus = msg.recipient_statuses[0]; // Trebao bi biti samo jedan za currentMemberId\n            return {\n                message_id: msg.message_id,\n                member_id: msg.member_id, // Originalno polje, ako se koristi\n                message_text: msg.message_text,\n                created_at: msg.created_at,\n                sender_id: msg.sender_id,\n                recipient_id: msg.recipient_id,\n                recipient_type: msg.recipient_type,\n                sender_type: msg.sender_type,\n                currentUserStatus: recipientStatus?.status as ('unread' | 'read' | 'archived' | undefined),\n                currentUserReadAt: recipientStatus?.read_at,\n                sender: msg.sender ? {\n                    member_id: msg.sender.member_id,\n                    first_name: msg.sender.first_name,\n                    last_name: msg.sender.last_name,\n                    full_name: msg.sender.full_name\n                } : null,\n            };\n        });\n    },\n\n    async getByMemberId(memberId: number): Promise<TransformedMessage[]> {\n        // memberId je ovdje isto što i currentMemberId za kojeg dohvaćamo poruke\n        const messageWithDetailsPayload = Prisma.validator<Prisma.MemberMessageDefaultArgs>()({\n          include: {\n            sender: { select: { member_id: true, first_name: true, last_name: true, full_name: true } },\n            recipient_statuses: { \n              select: { status: true, read_at: true, recipient_member_id: true } \n            },\n          },\n        });\n        type MessageWithDetails = Prisma.MemberMessageGetPayload<typeof messageWithDetailsPayload>;\n\n        const messagesData = await prisma.memberMessage.findMany({\n            where: {\n                recipient_statuses: {\n                    some: {\n                        recipient_member_id: memberId,\n                        // status: { not: 'archived' } // Opcionalno, ako ne želimo arhivirane\n                    },\n                },\n            },\n            include: {\n                sender: messageWithDetailsPayload.include.sender,\n                recipient_statuses: {\n                    where: { recipient_member_id: memberId },\n                    select: messageWithDetailsPayload.include.recipient_statuses.select\n                }\n            },\n            orderBy: { created_at: 'desc' },\n        });\n\n        return (messagesData as MessageWithDetails[]).map((msg): TransformedMessage => {\n            const recipientStatus = msg.recipient_statuses[0]; \n            return {\n                message_id: msg.message_id,\n                member_id: msg.member_id, \n                message_text: msg.message_text,\n                created_at: msg.created_at, \n                sender_id: msg.sender_id,\n                recipient_id: msg.recipient_id,\n                recipient_type: msg.recipient_type, \n                sender_type: msg.sender_type, \n                currentUserStatus: recipientStatus?.status as ('unread' | 'read' | 'archived' | undefined),\n                currentUserReadAt: recipientStatus?.read_at, \n                sender: msg.sender ? {\n                    member_id: msg.sender.member_id,\n                    first_name: msg.sender.first_name,\n                    last_name: msg.sender.last_name,\n                    full_name: msg.sender.full_name\n                } : null,\n            };\n        });\n    },\n\n    async getMessagesSentByAdmin(adminId: number): Promise<TransformedMessage[]> {\n        const messageWithDetailsPayload = Prisma.validator<Prisma.MemberMessageDefaultArgs>()({\n          include: {\n            sender: { select: { member_id: true, first_name: true, last_name: true, full_name: true } },\n            recipient_statuses: { \n            select: { \n              status: true, \n              read_at: true, \n              recipient_member_id: true,\n              member: { select: { full_name: true } } // Dodano za dohvaćanje imena primatelja\n            } \n          } // Uključujemo radi sukladnosti s TransformedMessage\n          },\n        });\n        type MessageWithDetails = Prisma.MemberMessageGetPayload<typeof messageWithDetailsPayload>;\n\n        const messagesData = await prisma.memberMessage.findMany({\n            where: {\n                sender_id: adminId,\n                sender_type: { in: ['member_administrator', 'member_superuser'] },\n            },\n            include: messageWithDetailsPayload.include,\n            orderBy: { created_at: 'desc' },\n        });\n\n        return (messagesData as MessageWithDetails[]).map((msg): TransformedMessage => {\n            // Za poslane poruke, currentUserStatus i currentUserReadAt nisu direktno primjenjivi\n            // na isti način kao za primljene. Ostavljamo ih kao undefined ili ih možemo izostaviti\n            // ako TransformedMessage sučelje to dopušta (opcionalni su).\n            return {\n                message_id: msg.message_id,\n                read_by: (msg.recipient_statuses || []).map(rs => ({\n                    member_id: rs.recipient_member_id,\n                    read_at: rs.read_at,\n                    full_name: rs.member?.full_name || null // Dodano ime primatelja\n                })),\n                member_id: msg.member_id,\n                message_text: msg.message_text,\n                created_at: msg.created_at,\n                sender_id: msg.sender_id,\n                recipient_id: msg.recipient_id,\n                recipient_type: msg.recipient_type,\n                sender_type: msg.sender_type,\n                currentUserStatus: undefined, // Nije relevantno za poslane poruke na ovaj način\n                currentUserReadAt: undefined, // Nije relevantno za poslane poruke na ovaj način\n                sender: msg.sender ? {\n                    member_id: msg.sender.member_id,\n                    first_name: msg.sender.first_name,\n                    last_name: msg.sender.last_name,\n                    full_name: msg.sender.full_name\n                } : null,\n                // recipient_statuses: msg.recipient_statuses // Može se dodati ako je potrebno prikazati statuse svih primatelja\n            };\n        });\n    },\n\n    async getSentMessagesByMemberId(memberId: number): Promise<TransformedMessage[]> {\n        const messageWithDetailsPayload = Prisma.validator<Prisma.MemberMessageDefaultArgs>()({\n          include: {\n            sender: { select: { member_id: true, first_name: true, last_name: true, full_name: true } },\n            recipient_statuses: { \n              select: { status: true, read_at: true, recipient_member_id: true }\n            },\n          },\n        });\n        type MessageWithDetails = Prisma.MemberMessageGetPayload<typeof messageWithDetailsPayload>;\n\n        const messagesData = await prisma.memberMessage.findMany({\n            where: {\n                sender_id: memberId,\n            },\n            include: messageWithDetailsPayload.include,\n            orderBy: { created_at: 'desc' },\n        });\n\n        return (messagesData as MessageWithDetails[]).map((msg): TransformedMessage => {\n            // Pronađi status za trenutnog korisnika (pošiljatelja)\n            const currentUserStatus = msg.recipient_statuses.find(rs => rs.recipient_member_id === memberId);\n\n            return {\n                message_id: msg.message_id,\n                member_id: msg.member_id,\n                message_text: msg.message_text,\n                created_at: msg.created_at,\n                sender_id: msg.sender_id,\n                recipient_id: msg.recipient_id,\n                recipient_type: msg.recipient_type,\n                sender_type: msg.sender_type,\n                currentUserStatus: currentUserStatus ? currentUserStatus.status as ('unread' | 'read' | 'archived' | undefined) : undefined,\n                currentUserReadAt: currentUserStatus ? currentUserStatus.read_at : undefined,\n                sender: msg.sender,\n            };\n        });\n    },\n\n    async getAdHocGroupMessagesForMember(currentMemberId: number): Promise<TransformedMessage[]> {\n        const messageWithDetailsPayload = Prisma.validator<Prisma.MemberMessageDefaultArgs>()({\n          include: {\n            sender: { select: { member_id: true, first_name: true, last_name: true, full_name: true } },\n            recipient_statuses: { \n              select: { status: true, read_at: true, recipient_member_id: true }\n            },\n          },\n        });\n        type MessageWithDetails = Prisma.MemberMessageGetPayload<typeof messageWithDetailsPayload>;\n\n        const messagesData = await prisma.memberMessage.findMany({\n            where: {\n                recipient_type: 'group',\n                // recipient_id bi trebao biti null za ad-hoc grupne poruke, pa ga ne filtriramo ovdje\n                recipient_statuses: {\n                    some: {\n                        recipient_member_id: currentMemberId,\n                        // status: { not: 'archived' } // Opcionalno, ako želimo izuzeti arhivirane\n                    },\n                },\n            },\n            include: {\n                sender: messageWithDetailsPayload.include.sender,\n                recipient_statuses: {\n                    where: { recipient_member_id: currentMemberId },\n                    select: messageWithDetailsPayload.include.recipient_statuses.select\n                }\n            },\n            orderBy: { created_at: 'desc' },\n        });\n\n        return (messagesData as MessageWithDetails[]).map((msg): TransformedMessage => {\n            const recipientStatus = msg.recipient_statuses.find(rs => rs.recipient_member_id === currentMemberId) || msg.recipient_statuses[0];\n            return {\n                message_id: msg.message_id,\n                member_id: msg.member_id,\n                message_text: msg.message_text,\n                created_at: msg.created_at,\n                sender_id: msg.sender_id,\n                recipient_id: msg.recipient_id,\n                recipient_type: msg.recipient_type,\n                sender_type: msg.sender_type,\n                currentUserStatus: recipientStatus?.status as ('unread' | 'read' | 'archived' | undefined),\n                currentUserReadAt: recipientStatus?.read_at,\n                sender: msg.sender ? {\n                    member_id: msg.sender.member_id,\n                    first_name: msg.sender.first_name,\n                    last_name: msg.sender.last_name,\n                    full_name: msg.sender.full_name\n                } : null,\n            };\n        });\n    },\n\n    async getMessagesForAllMembers(currentMemberId: number): Promise<TransformedMessage[]> {\n        const messageWithDetailsPayload = Prisma.validator<Prisma.MemberMessageDefaultArgs>()({\n          include: {\n            sender: { select: { member_id: true, first_name: true, last_name: true, full_name: true } },\n            recipient_statuses: { \n              select: { status: true, read_at: true, recipient_member_id: true }\n            },\n          },\n        });\n        type MessageWithDetails = Prisma.MemberMessageGetPayload<typeof messageWithDetailsPayload>;\n\n        const messagesData = await prisma.memberMessage.findMany({\n            where: {\n                recipient_type: 'all',\n                recipient_statuses: {\n                    some: {\n                        recipient_member_id: currentMemberId,\n                        // status: { not: 'archived' } // Opcionalno\n                    },\n                },\n            },\n            include: {\n                sender: messageWithDetailsPayload.include.sender,\n                recipient_statuses: {\n                    where: { recipient_member_id: currentMemberId }, // Status samo za ovog člana\n                    select: messageWithDetailsPayload.include.recipient_statuses.select\n                }\n            },\n            orderBy: { created_at: 'desc' },\n        });\n\n        return (messagesData as MessageWithDetails[]).map((msg): TransformedMessage => {\n            const recipientStatus = msg.recipient_statuses.find(rs => rs.recipient_member_id === currentMemberId) || msg.recipient_statuses[0];\n            return {\n                message_id: msg.message_id,\n                member_id: msg.member_id,\n                message_text: msg.message_text,\n                created_at: msg.created_at,\n                sender_id: msg.sender_id,\n                recipient_id: msg.recipient_id,\n                recipient_type: msg.recipient_type,\n                sender_type: msg.sender_type,\n                currentUserStatus: recipientStatus?.status as ('unread' | 'read' | 'archived' | undefined),\n                currentUserReadAt: recipientStatus?.read_at,\n                sender: msg.sender ? {\n                    member_id: msg.sender.member_id,\n                    first_name: msg.sender.first_name,\n                    last_name: msg.sender.last_name,\n                    full_name: msg.sender.full_name\n                } : null,\n            };\n        });\n    },\n\n    async markAsRead(messageId: number, memberId: number): Promise<void> {\n        await prisma.messageRecipientStatus.updateMany({\n            where: {\n                message_id: messageId,\n                recipient_member_id: memberId,\n            },\n            data: {\n                status: 'read',\n                read_at: getCurrentDate(),\n            },\n        });\n    },\n\n    async archiveMessage(messageId: number, memberId: number): Promise<void> {\n        await prisma.messageRecipientStatus.updateMany({\n            where: {\n                message_id: messageId,\n                recipient_member_id: memberId,\n            },\n            data: {\n                status: 'archived',\n                // Možda ne želimo postaviti read_at za arhiviranje, ovisno o logici\n            },\n        });\n    },\n\n    async deleteMessage(messageId: number): Promise<void> {\n        // Prvo obriši povezane statuse primatelja da se izbjegnu problemi s referencijalnim integritetom\n        await prisma.messageRecipientStatus.deleteMany({\n            where: { message_id: messageId },\n        });\n        await prisma.memberMessage.delete({ where: { message_id: messageId }});\n    },\n\n    async deleteAllMessages(): Promise<void> {\n        await prisma.messageRecipientStatus.deleteMany({}); // Obriši sve statuse\n        await prisma.memberMessage.deleteMany({}); // Zatim obriši sve poruke\n    },\n\n    async messageExists(messageId: number): Promise<boolean> {\n        const count = await prisma.memberMessage.count({ where: { message_id: messageId }});\n        return count > 0;\n    },\n\n    // OPTIMIZIRANA funkcija za brojanje nepročitanih poruka - serverless friendly\n    async countUnreadMessages(memberId: number): Promise<number> {\n        try {\n            // Optimiziran upit s minimalnim JOIN-om za serverless performanse\n            const count = await prisma.messageRecipientStatus.count({\n                where: {\n                    recipient_member_id: memberId,\n                    status: 'unread',\n                    // Optimiziran pristup - direktno isključujemo self-sent poruke\n                    message: {\n                        sender_id: { not: memberId }\n                    }\n                },\n            });\n            return count;\n        } catch (error) {\n            console.error('Error counting unread messages for member', memberId, ':', error);\n            return 0; // Fallback vrijednost umjesto error-a\n        }\n    }\n};\n\nexport default memberMessageRepository;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\member.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\membership.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\stamp.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\repositories\\systemManager.repository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\activity.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\admin.messages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\admin.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\audit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\cardnumber.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\debug.routes.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":532,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":532,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\nimport fs from 'fs';\nimport { promises as fsPromises } from 'fs';\nimport util from 'util';\nimport { exec } from 'child_process';\nimport { authMiddleware, roles } from '../middleware/authMiddleware.js';\n\n// Import db\nimport prisma from '../utils/prisma.js';\nimport { Member, MembershipDetails, MembershipPeriod, StampInventory, Activity, ActivityParticipation } from '@prisma/client';\n\n// Import member service\n\n// Import membership service\n\nimport { getCurrentDate } from '../utils/dateUtils.js';\n\nconst execPromise = util.promisify(exec);\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst router = express.Router();\n\n// Debug endpoint to check if file exists\nrouter.get('/file-exists/:subdirectory/:filename', async (req, res) => {\n  try {\n    const { subdirectory, filename } = req.params;\n    const filePath = path.join(__dirname, '..', '..', 'uploads', subdirectory, filename);\n    \n    console.log('Checking if file exists:', filePath);\n    \n    try {\n      const stats = await fsPromises.stat(filePath);\n      res.json({\n        exists: true,\n        size: stats.size,\n        isFile: stats.isFile(),\n        lastModified: stats.mtime\n      });\n    } catch (err: unknown) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      res.status(404).json({\n        exists: false,\n        error: errorMessage,\n        checkedPath: filePath\n      });\n    }\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    res.status(500).json({ error: errorMessage });\n  }\n});\n\n// Define file info type\ninterface FileInfo {\n  path: string;\n  size: number;\n  modified: Date;\n}\n\n// Define path info types\ninterface PathInfoBase {\n  name: string;\n  path: string;\n  exists: boolean;\n  canWrite: boolean;\n}\n\ninterface PathInfoSuccess extends PathInfoBase {\n  exists: true;\n  isDirectory: boolean;\n  permissions: string;\n  writeTest?: string;\n}\n\ninterface PathInfoError extends PathInfoBase {\n  exists: false;\n  error: string;\n}\n\ntype PathInfo = PathInfoSuccess | PathInfoError;\n\n// List all files in uploads directory and subdirectories\nrouter.get('/fs/list-files', async (req, res) => {\n  try {\n    const basePath = process.env.NODE_ENV === 'production' \n      ? '/app/uploads' \n      : path.join(__dirname, '..', '..', 'uploads');\n    \n    // Function to recursively list files with their sizes\n    async function listFilesRecursive(dir: string, baseDir = ''): Promise<FileInfo[]> {\n      const files = await fsPromises.readdir(dir, { withFileTypes: true });\n      let results: FileInfo[] = [];\n      \n      for (const file of files) {\n        const fullPath = path.join(dir, file.name);\n        const relativePath = path.join(baseDir, file.name);\n        \n        if (file.isDirectory()) {\n          const subResults = await listFilesRecursive(fullPath, relativePath);\n          results = [...results, ...subResults];\n        } else {\n          const stats = await fsPromises.stat(fullPath);\n          results.push({\n            path: relativePath,\n            size: stats.size,\n            modified: stats.mtime\n          });\n        }\n      }\n      \n      return results;\n    }\n    \n    // Create base directory if it doesn't exist\n    await fsPromises.mkdir(basePath, { recursive: true });\n    \n    // List all files recursively\n    const fileList = await listFilesRecursive(basePath);\n    \n    // Get disk usage information\n    const { stdout: diskUsage } = await execPromise('df -h');\n    \n    // Check directory permissions\n    const { stdout: permissions } = await execPromise(`ls -la ${basePath}`);\n    \n    res.json({\n      basePath,\n      files: fileList,\n      diskUsage: diskUsage.trim().split('\\n'),\n      permissions: permissions.trim().split('\\n'),\n      fileCount: fileList.length,\n      totalSize: fileList.reduce((sum: number, file: FileInfo) => sum + file.size, 0)\n    });\n  } catch (error) {\n    console.error('Error listing files:', error);\n    res.status(500).json({ \n      error: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined\n    });\n  }\n});\n\n// Test writing a file and reading it back\nrouter.post('/fs/test-write', async (req, res) => {\n  try {\n    const basePath = process.env.NODE_ENV === 'production' \n      ? '/app/uploads' \n      : path.join(__dirname, '..', '..', 'uploads');\n    \n    const testFileName = `test-file-${Date.now()}.txt`;\n    const testFilePath = path.join(basePath, testFileName);\n    const content = `Test file created at ${getCurrentDate().toISOString()}`;\n    \n    // Ensure directory exists\n    await fsPromises.mkdir(basePath, { recursive: true });\n    \n    // Write test file\n    await fsPromises.writeFile(testFilePath, content, 'utf8');\n    console.log(`Test file written to ${testFilePath}`);\n    \n    // Read it back\n    const readContent = await fsPromises.readFile(testFilePath, 'utf8');\n    \n    // Get file stats\n    const stats = await fsPromises.stat(testFilePath);\n    \n    res.json({\n      success: true,\n      file: {\n        name: testFileName,\n        path: testFilePath,\n        size: stats.size,\n        created: stats.birthtime,\n        modified: stats.mtime,\n        contentMatches: readContent === content,\n        content: readContent\n      }\n    });\n  } catch (error) {\n    console.error('Error in file write test:', error);\n    res.status(500).json({ \n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined\n    });\n  }\n});\n\n// Test all paths involved in image uploads\nrouter.get('/fs/image-paths', async (req, res) => {\n  try {\n    const basePath = process.env.NODE_ENV === 'production' \n      ? '/app/uploads' \n      : path.join(__dirname, '..', '..', 'uploads');\n    \n    const profileImagesDir = path.join(basePath, 'profile_images');\n    \n    // Information about all relevant directories\n    const pathInfo = [\n      { name: 'Base uploads', path: basePath },\n      { name: 'Profile images', path: profileImagesDir },\n    ];\n    \n    // Check all paths\n    const results: PathInfo[] = [];\n    for (const info of pathInfo) {\n      try {\n        await fsPromises.mkdir(info.path, { recursive: true });\n        const stats = await fsPromises.stat(info.path);\n        const { stdout } = await execPromise(`ls -la \"${info.path}\"`);\n        \n        results.push({\n          ...info,\n          exists: true,\n          isDirectory: stats.isDirectory(),\n          permissions: stdout.trim().split('\\n')[0],\n          canWrite: true\n        });\n      } catch (error) {\n        results.push({\n          ...info,\n          exists: false,\n          error: error instanceof Error ? error.message : String(error),\n          canWrite: false\n        });\n      }\n    }\n    \n    // Test writing to each directory\n    for (const result of results) {\n      if (result.exists && 'isDirectory' in result && result.isDirectory) {\n        try {\n          const testFile = path.join(result.path, `test-${Date.now()}.txt`);\n          await fsPromises.writeFile(testFile, 'test', 'utf8');\n          await fsPromises.unlink(testFile);\n          (result as PathInfoSuccess).writeTest = 'success';\n        } catch (error) {\n          (result as PathInfoSuccess).writeTest = `failed: ${error instanceof Error ? error.message : String(error)}`;\n          result.canWrite = false;\n        }\n      }\n    }\n    \n    res.json({\n      paths: results,\n      summary: {\n        allPathsExist: results.every(r => r.exists),\n        allPathsWritable: results.every(r => r.canWrite),\n      }\n    });\n  } catch (error) {\n    console.error('Error checking image paths:', error);\n    res.status(500).json({ \n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Endpoint za resetiranje testne baze podataka u razvojnom okruženju\nrouter.post('/reset-test-database', async (req, res) => {\n  // Dozvoljavamo resetiranje baze samo u development okruženju\n  if (process.env.NODE_ENV !== 'development') {\n    return res.status(403).json({ \n      error: 'Resetiranje baze podataka je dopušteno samo u razvojnom okruženju' \n    });\n  }\n  \n  try {\n    console.log('🔄 Resetiranje testne baze podataka...');\n    \n    // Spremamo podatke prije resetiranja\n    let backupData: { \n      timestamp?: string; \n      filename?: string;\n      members?: Member[];\n      membership_details?: MembershipDetails[];\n      membership_periods?: MembershipPeriod[];\n      stamp_inventory?: StampInventory[];\n      activities?: Activity[];\n      activity_participants?: ActivityParticipation[];\n    } = {};\n    \n    try {\n      // Dohvaćamo stanje ključnih tablica prije resetiranja\n      const membersResult = await prisma.member.findMany();\n      const membershipDetailsResult = await prisma.membershipDetails.findMany();\n      const membershipPeriodsResult = await prisma.membershipPeriod.findMany();\n      const stampInventoryResult = await prisma.stampInventory.findMany();\n      const activitiesResult = await prisma.activity.findMany();\n      const activityParticipantsResult = await prisma.activityParticipation.findMany();\n      \n      // Spremamo u backup objekt\n      backupData = {\n        timestamp: getCurrentDate().toISOString(),\n        members: membersResult,\n        membership_details: membershipDetailsResult,\n        membership_periods: membershipPeriodsResult,\n        stamp_inventory: stampInventoryResult,\n        activities: activitiesResult,\n        activity_participants: activityParticipantsResult\n      };\n      \n      // Spašavamo backup u datoteku\n      const backupDir = path.join(__dirname, '..', '..', 'backups');\n      await fsPromises.mkdir(backupDir, { recursive: true });\n      \n      const backupFileName = `backup_${getCurrentDate().toISOString().replace(/[:.]/g, '-')}.json`;\n      const backupPath = path.join(backupDir, backupFileName);\n      \n      await fsPromises.writeFile(\n        backupPath, \n        JSON.stringify(backupData, null, 2), \n        'utf8'\n      );\n      \n      console.log(`✅ Backup podataka spremljen u: ${backupPath}`);\n    } catch (backupError) {\n      console.error('⚠️ Greška prilikom stvaranja backupa:', backupError);\n      // Nastavljamo s resetiranjem čak i ako backup nije uspio\n    }\n    \n    // Koristimo Prisma transakciju za sigurno izvođenje svih izmjena\n    await prisma.$transaction(async (tx) => {\n      // 1. RESETIRANJE KORISNIKA I ČLANSTVA\n      \n      // Vraćanje statusa svih članova na \"registered\" (početni status)\n      await tx.member.updateMany({\n        data: {\n          status: 'registered'\n        }\n      });\n      \n      // 2. RESETIRANJE ČLANARINA I PERIODA\n      \n      // Vraćanje članarina na trenutnu godinu i poništavanje datuma plaćanja\n      const currentYear = getCurrentDate().getFullYear();\n      await tx.membershipDetails.updateMany({\n        data: {\n          fee_payment_year: currentYear,\n          fee_payment_date: null,\n          card_stamp_issued: false,\n          next_year_stamp_issued: false\n        }\n      });\n      \n      // 3. RESETIRANJE INVENTARA I MARKICA\n      \n      // Vraćanje inventara markica na početno stanje\n      await tx.stampInventory.updateMany({\n        data: {\n          issued_count: 0\n        }\n      });\n      \n      // 6. RESETIRANJE PORUKA\n      \n      // Brisanje testnih poruka (zadnji dan)\n      const oneDayAgo = new Date();\n      oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n      \n      await tx.memberMessage.deleteMany({\n        where: {\n          created_at: {\n            gt: oneDayAgo\n          }\n        }\n      });\n      \n      // 8. RESETIRANJE UPDATE QUEUE-a\n      \n      // Brisanje svih stavki iz reda čekanja za ažuriranje lozinki\n      await tx.password_update_queue.deleteMany({});\n      \n      console.log('✅ Baza podataka uspješno resetirana na početno stanje');\n    }, {\n      timeout: 12000 // 12 sekundi - ispod Prisma Accelerate limita\n    });\n    \n    // Vraćamo uspješan odgovor s informacijom o backup-u\n    res.json({ \n      success: true, \n      message: 'Testna baza podataka uspješno resetirana',\n      backupCreated: backupData.timestamp ? true : false,\n      backupTimestamp: backupData.timestamp || null,\n      timestamp: getCurrentDate()\n    });\n  } catch (error) {\n    console.error('❌ Greška prilikom resetiranja baze:', error);\n    res.status(500).json({ \n      error: error instanceof Error ? error.message : 'Nepoznata greška',\n      timestamp: getCurrentDate()\n    });\n  }\n});\n\n// Endpoint za vraćanje podataka iz backup-a\nrouter.post('/restore-from-backup/:filename', async (req, res) => {\n  // Dozvoljavamo vraćanje backupa samo u development okruženju\n  if (process.env.NODE_ENV !== 'development') {\n    return res.status(403).json({ \n      error: 'Vraćanje backupa je dopušteno samo u razvojnom okruženju' \n    });\n  }\n  \n  try {\n    const { filename } = req.params;\n    const backupDir = path.join(__dirname, '..', '..', 'backups');\n    const backupPath = path.join(backupDir, filename);\n    \n    console.log(`🔄 Pokušaj vraćanja podataka iz backupa: ${backupPath}`);\n    \n    // Provjera postojanja datoteke\n    try {\n      await fsPromises.access(backupPath, fs.constants.F_OK);\n    } catch (_err) {\n      return res.status(404).json({ \n        error: `Backup datoteka nije pronađena: ${filename}` \n      });\n    }\n    \n    // Učitavanje backup podataka\n    const backupData = JSON.parse(\n      await fsPromises.readFile(backupPath, 'utf8')\n    );\n    \n    // Provjera strukture\n    if (!backupData.members || !backupData.membership_details) {\n      return res.status(400).json({ \n        error: 'Nevažeća struktura backup datoteke' \n      });\n    }\n    \n    // Vraćanje podataka u transakciji\n    await prisma.$transaction(async (tx) => {\n      // Primjer vraćanja podataka za members tablicu\n      // Ovo je kompleksno jer treba pažljivo obraditi svaki redak i polje\n      // Ovdje je pojednostavljeni pristup za members tablicu\n      \n      console.log('🔄 Vraćanje podataka za članove...');\n      \n      // Prvo brisanje podataka iz tablica koje imaju strane ključeve\n      await tx.password_update_queue.deleteMany({});\n      await tx.activityParticipation.deleteMany({});\n      await tx.annualStatistics.deleteMany({});\n      await tx.auditLog.deleteMany({});\n      await tx.memberMessage.deleteMany({});\n      await tx.memberPermissions.deleteMany({});\n      \n      // Brisanje postojećih podataka iz membership_details (foreign key constraint)\n      await tx.membershipDetails.deleteMany({});\n\n      // Brisanje postojećih podataka iz members\n      await tx.member.deleteMany({});\n      \n      // Inserti za members tablicu\n      for (const member of backupData.members) {\n        const { member_id: _member_id, ...memberData } = member;\n        \n        await tx.member.create({\n          data: {\n            ...memberData\n          }\n        });\n      }\n      \n      // Inserti za membership_details tablicu\n      for (const detail of backupData.membership_details) {\n        const { detail_id: _detail_id, ...detailData } = detail;\n        \n        await tx.membershipDetails.create({\n          data: {\n            ...detailData\n          }\n        });\n      }\n      \n      // Slično za ostale tablice...\n      \n      console.log('✅ Podaci uspješno vraćeni iz backupa');\n    }, {\n      timeout: 12000 // 12 sekundi - ispod Prisma Accelerate limita od 15s\n    });\n    \n    res.json({\n      success: true,\n      message: 'Podaci uspješno vraćeni iz backupa',\n      backupInfo: {\n        filename,\n        timestamp: backupData.timestamp,\n        tables: Object.keys(backupData)\n      },\n      timestamp: getCurrentDate()\n    });\n  } catch (error) {\n    console.error('❌ Greška prilikom vraćanja backupa:', error);\n    res.status(500).json({ \n      error: error instanceof Error ? error.message : 'Nepoznata greška',\n      timestamp: getCurrentDate()\n    });\n  }\n});\n\n// Endpoint za listanje dostupnih backupa\nrouter.get('/list-backups', async (req, res) => {\n  try {\n    const backupDir = path.join(__dirname, '..', '..', 'backups');\n    \n    try {\n      await fsPromises.access(backupDir, fs.constants.F_OK);\n    } catch (_err) {\n      // Ako direktorij ne postoji, kreiraj ga\n      await fsPromises.mkdir(backupDir, { recursive: true });\n      return res.json({ backups: [] });\n    }\n    \n    const files = await fsPromises.readdir(backupDir);\n    const backupFiles = files.filter(f => f.endsWith('.json'));\n    \n    // Sortiraj po vremenu kreiranja, najnoviji prvo\n    const backups = await Promise.all(backupFiles.map(async (filename) => {\n      const filePath = path.join(backupDir, filename);\n      const stats = await fsPromises.stat(filePath);\n      \n      // Pokušaj pročitati timestamp iz datoteke\n      let fileTimestamp = null;\n      try {\n        const data = JSON.parse(await fsPromises.readFile(filePath, 'utf8'));\n        fileTimestamp = data.timestamp;\n      } catch (err) {\n        // Ignoriramo grešku\n      }\n      \n      return {\n        filename,\n        created: stats.ctime,\n        size: stats.size,\n        timestamp: fileTimestamp\n      };\n    }));\n    \n    // Sortiraj po vremenu kreiranja, najnoviji prvo\n    backups.sort((a, b) => b.created.getTime() - a.created.getTime());\n    \n    res.json({ backups });\n  } catch (_error) {\n    console.error('Greška prilikom listanja backupa:', _error);\n    res.status(500).json({ \n      error: _error instanceof Error ? _error.message : 'Nepoznata greška' \n    });\n  }\n});\n\n// Endpoint za čišćenje testnih podataka iz membership_periods tablice\nrouter.post('/cleanup-test-data', authMiddleware, roles.requireAdmin, async (req, res) => {\n  // Dozvoljavamo čišćenje samo u development okruženju\n  if (process.env.NODE_ENV !== 'development') {\n    return res.status(403).json({ \n      error: 'Čišćenje testnih podataka je dopušteno samo u razvojnom okruženju' \n    });\n  }\n\n  try {\n    console.log('🧹 Čišćenje testnih podataka iz baze...');\n    \n    // Brisanje testnih podataka iz membership_periods\n    const deletedPeriods = await prisma.membershipPeriod.findMany({\n      where: {\n        is_test_data: true\n      },\n      select: {\n        member_id: true\n      }\n    });\n    \n    const result = await prisma.membershipPeriod.deleteMany({\n      where: {\n        is_test_data: true\n      }\n    });\n    \n    const affectedMembers = deletedPeriods.map(period => period.member_id).filter(id => id !== null) as number[];\n    const uniqueMembers = [...new Set(affectedMembers)];\n    \n    console.log(`✅ Obrisano ${result.count} testnih zapisa za ${uniqueMembers.length} članova`);\n    \n    // Ponovno izračunavanje statusa za članove čiji su podaci očišćeni\n    if (uniqueMembers.length > 0) {\n      console.log(`🔄 Ažuriranje statusa za ${uniqueMembers.length} članova...`);\n      \n      // Za svakog člana provjeravamo ima li aktivnih razdoblja i po potrebi ažuriramo status\n      for (const memberId of uniqueMembers) {\n        const activePeriodsResult = await prisma.membershipPeriod.findMany({\n          where: {\n            member_id: memberId,\n            end_date: null\n          }\n        });\n        \n        const activeCount = activePeriodsResult.length;\n        \n        // Ako nema aktivnih perioda nakon čišćenja, onemogući člana\n        // Ako nema aktivnih perioda, status 'inactive' je izveden i NE zapisuje se u tablicu\n        if (activeCount === 0) {\n          console.log(`🚫 Član ${memberId} nema aktivnih razdoblja - status 'inactive' je izveden, ne zapisuje se u bazu.`);\n          // Ovdje po potrebi možeš postaviti na 'pending' ako želiš, ali 'inactive' se ne zapisuje.\n        } else {\n          console.log(`✅ Član ${memberId} ima ${activeCount} aktivnih razdoblja - postavljanje na 'registered'`);\n          await prisma.member.update({\n            where: {\n              member_id: memberId\n            },\n            data: {\n              status: 'registered'\n            }\n          });\n        }\n      }\n    }\n    \n    // Šaljemo odgovor s rezultatima\n    res.json({\n      success: true,\n      message: `Uspješno očišćeni testni podaci`,\n      details: {\n        deletedRecords: result.count,\n        affectedMembers: uniqueMembers.length,\n        memberIds: uniqueMembers\n      },\n      timestamp: getCurrentDate()\n    });\n    \n  } catch (error) {\n    console.error('❌ Greška prilikom čišćenja testnih podataka:', error);\n    res.status(500).json({ \n      error: error instanceof Error ? error.message : 'Nepoznata greška',\n      timestamp: getCurrentDate()\n    });\n  }\n});\n\n// Funkcija za brisanje svih datoteka iz direktorija\nasync function _cleanDirectory(directory: string): Promise<void> {\n  try {\n    // Provjeri postoji li direktorij\n    await fsPromises.access(directory);\n    \n    // Pročitaj sadržaj direktorija\n    const files = await fsPromises.readdir(directory);\n    \n    // Obriši svaku datoteku\n    for (const file of files) {\n      const filePath = path.join(directory, file);\n      const stats = await fsPromises.stat(filePath);\n      \n      if (stats.isDirectory()) {\n        // Rekurzivno obriši poddirektorije\n        await _cleanDirectory(filePath);\n        await fsPromises.rmdir(filePath);\n      } else {\n        // Obriši datoteku\n        await fsPromises.unlink(filePath);\n      }\n    }\n  } catch (error: unknown) {\n    // Ako direktorij ne postoji, to je OK\n    if (error instanceof Error) {\n      const code = (error as { code?: string }).code;\n      if (code !== 'ENOENT') {\n        throw error;\n      }\n    } else {\n      // Ne očekivani tip greške – propagiramo\n      throw error;\n    }\n  }\n}\n\n// Funkcija za sortiranje datoteka po vremenu promjene (od najnovije do najstarije)\nfunction _sortFilesByDate(a: { mtime: Date }, b: { mtime: Date }): number {\n  return b.mtime.getTime() - a.mtime.getTime();\n}\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\debug.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\dev.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\generic.messages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\members.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\membership.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\settings.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\skillRoutes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\stamp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\routes\\systemManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\scripts\\backupDatabase.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":38,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2881,2884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2881,2884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// scripts/backupDatabase.ts\n// Skripta za stvaranje sigurnosnih kopija baze podataka\nimport { PrismaClient } from '@prisma/client';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport dotenv from 'dotenv';\n\n// Učitaj .env varijable\ndotenv.config();\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst prisma = new PrismaClient();\n\n// Funkcija za formatiranje datuma u obliku YYYY-MM-DD_HH-MM-SS\nfunction getFormattedDate() {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n  const seconds = String(now.getSeconds()).padStart(2, '0');\n  \n  return `${year}-${month}-${day}_${hours}-${minutes}-${seconds}`;\n}\n\nasync function createBackupDirectory() {\n  // Za Render, koristimo privremeni direktorij jer imamo read-only filesystem\n  // u produkciji, ali možemo koristiti /tmp direktorij\n  const backupDir = process.env.NODE_ENV === 'production' \n    ? '/tmp/promina-drnis-backups' \n    : path.join(__dirname, '..', '..', 'backups');\n  \n  try {\n    await fs.access(backupDir);\n  } catch (error) {\n    // Direktorij ne postoji, kreiraj ga\n    await fs.mkdir(backupDir, { recursive: true });\n    console.log(`Kreiran direktorij za sigurnosne kopije: ${backupDir}`);\n  }\n  return backupDir;\n}\n\n// Funkcija za slanje sigurnosne kopije na vanjski servis (npr. S3, Google Drive, itd.)\nasync function uploadBackupToExternalService(backupFilePath: string, backupFileName: string): Promise<boolean> {\n  // Ovdje bi trebala biti implementacija za slanje sigurnosne kopije na vanjski servis\n  // Primjer: slanje na S3, Google Drive, Dropbox, itd.\n  \n  // Za sada samo ispisujemo poruku\n  console.log(`Simulacija slanja sigurnosne kopije ${backupFileName} na vanjski servis...`);\n  \n  // Ako imate konfiguriran S3 ili drugi servis, ovdje biste implementirali slanje\n  // Primjer implementacije za S3 bi bio ovdje\n  \n  // Za implementaciju s pravim servisom, trebat će vam dodatne biblioteke i konfiguracija\n  return true;\n}\n\n// Funkcija za dohvat podataka iz baze i stvaranje JSON sigurnosne kopije\n// Ažurirano: uključuje consumed_card_numbers i password_update_queue tablice\nasync function backupDatabaseToJson() {\n  try {\n    const backupDir = await createBackupDirectory();\n    const timestamp = getFormattedDate();\n    const backupFileName = `promina_drnis_backup_${timestamp}.json`;\n    const backupFilePath = path.join(backupDir, backupFileName);\n    \n    console.log('Dohvaćanje podataka iz baze...');\n    \n    // Dohvati sve podatke iz svih tablica\n    const backup = {\n      timestamp: new Date().toISOString(),\n      data: {} as Record<string, any>\n    };\n    \n    // Dohvati članove\n    backup.data.members = await prisma.member.findMany();\n    console.log(`Dohvaćeno ${backup.data.members.length} članova`);\n    \n    // Dohvati aktivnosti\n    backup.data.activities = await prisma.activity.findMany();\n    console.log(`Dohvaćeno ${backup.data.activities.length} aktivnosti`);\n    \n    // Dohvati tipove aktivnosti\n    backup.data.activityTypes = await prisma.activityType.findMany();\n    console.log(`Dohvaćeno ${backup.data.activityTypes.length} tipova aktivnosti`);\n    \n    // Dohvati sudionike aktivnosti\n    backup.data.activityParticipants = await prisma.activityParticipation.findMany();\n    console.log(`Dohvaćeno ${backup.data.activityParticipants.length} sudionika aktivnosti`);\n    \n    // Dohvati sistemske postavke\n    backup.data.systemSettings = await prisma.systemSettings.findMany();\n    console.log(`Dohvaćeno ${backup.data.systemSettings.length} sistemskih postavki`);\n    \n    // Dohvati detalje članstva\n    backup.data.membershipDetails = await prisma.membershipDetails.findMany();\n    console.log(`Dohvaćeno ${backup.data.membershipDetails.length} detalja članstva`);\n    \n    // Dohvati periode članstva\n    backup.data.membershipPeriods = await prisma.membershipPeriod.findMany();\n    console.log(`Dohvaćeno ${backup.data.membershipPeriods.length} perioda članstva`);\n    \n    // Dohvati poruke članova\n    backup.data.memberMessages = await prisma.memberMessage.findMany();\n    console.log(`Dohvaćeno ${backup.data.memberMessages.length} poruka članova`);\n    \n    // Dohvati statuse primatelja poruka\n    backup.data.messageRecipientStatuses = await prisma.messageRecipientStatus.findMany();\n    console.log(`Dohvaćeno ${backup.data.messageRecipientStatuses.length} statusa primatelja poruka`);\n    \n    // Dohvati inventar markica\n    backup.data.stampInventory = await prisma.stampInventory.findMany();\n    console.log(`Dohvaćeno ${backup.data.stampInventory.length} inventara markica`);\n    \n    // Dohvati brojeve iskaznica\n    backup.data.cardNumbers = await prisma.cardNumber.findMany();\n    console.log(`Dohvaćeno ${backup.data.cardNumbers.length} brojeva iskaznica`);\n\n    // Dohvati potrošene brojeve kartica\n    backup.data.consumedCardNumbers = await prisma.consumedCardNumber.findMany();\n    console.log(`Dohvaćeno ${backup.data.consumedCardNumbers.length} potrošenih brojeva kartica`);\n\n    // Dohvati queue za promjenu lozinke\n    backup.data.passwordUpdateQueue = await prisma.password_update_queue.findMany();\n    console.log(`Dohvaćeno ${backup.data.passwordUpdateQueue.length} zahtjeva za promjenu lozinke`);\n    \n    // Dohvati godišnje statistike\n    backup.data.annualStatistics = await prisma.annualStatistics.findMany();\n    console.log(`Dohvaćeno ${backup.data.annualStatistics.length} godišnjih statistika`);\n    \n    // Dohvati audit logove\n    backup.data.auditLogs = await prisma.auditLog.findMany();\n    console.log(`Dohvaćeno ${backup.data.auditLogs.length} audit logova`);\n    \n    // Dohvati dozvole članova\n    backup.data.memberPermissions = await prisma.memberPermissions.findMany();\n    console.log(`Dohvaćeno ${backup.data.memberPermissions.length} dozvola članova`);\n    \n    // Dohvati refresh tokene\n    backup.data.refreshTokens = await prisma.refresh_tokens.findMany();\n    console.log(`Dohvaćeno ${backup.data.refreshTokens.length} refresh tokena`);\n    \n    // Zapiši sigurnosnu kopiju u datoteku\n    await fs.writeFile(backupFilePath, JSON.stringify(backup, null, 2));\n    console.log(`Sigurnosna kopija uspješno kreirana: ${backupFilePath}`);\n    \n    // Pošalji sigurnosnu kopiju na vanjski servis ako smo u produkciji\n    if (process.env.NODE_ENV === 'production') {\n      await uploadBackupToExternalService(backupFilePath, backupFileName);\n    }\n    \n    // Čišćenje starih sigurnosnih kopija (opcijsko)\n    await cleanupOldBackups(backupDir);\n    \n    return {\n      success: true,\n      filePath: backupFilePath,\n      fileName: backupFileName,\n      timestamp: backup.timestamp\n    };\n  } catch (error: unknown) {\n    console.error('Greška prilikom stvaranja sigurnosne kopije:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : String(error)\n    };\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\n// Funkcija za brisanje starih sigurnosnih kopija (zadržava zadnjih 7)\nasync function cleanupOldBackups(backupDir: string): Promise<void> {\n  try {\n    const files = await fs.readdir(backupDir);\n    const jsonFiles = files.filter(file => file.endsWith('.json'));\n    \n    if (jsonFiles.length <= 7) {\n      return; // Nema potrebe za brisanjem ako imamo 7 ili manje datoteka\n    }\n    \n    // Sortiraj datoteke po datumu (najnovije prvo)\n    const fileStats = await Promise.all(\n      jsonFiles.map(async (file) => {\n        const filePath = path.join(backupDir, file);\n        const stats = await fs.stat(filePath);\n        return { file, stats };\n      })\n    );\n    \n    fileStats.sort((a, b) => b.stats.mtime.getTime() - a.stats.mtime.getTime());\n    \n    // Zadrži samo zadnjih 7 sigurnosnih kopija\n    const filesToDelete = fileStats.slice(7).map(item => item.file);\n    \n    for (const file of filesToDelete) {\n      await fs.unlink(path.join(backupDir, file));\n      console.log(`Obrisana stara sigurnosna kopija: ${file}`);\n    }\n  } catch (error) {\n    console.error('Greška prilikom čišćenja starih sigurnosnih kopija:', error);\n  }\n}\n\n// Ako se skripta pokreće direktno, izvrši sigurnosnu kopiju\nif (process.argv[1] === fileURLToPath(import.meta.url)) {\n  backupDatabaseToJson().then(result => {\n    if (result.success) {\n      console.log('Sigurnosna kopija uspješno kreirana');\n      process.exit(0);\n    } else {\n      console.error('Greška prilikom stvaranja sigurnosne kopije');\n      process.exit(1);\n    }\n  }).catch(error => {\n    console.error('Neočekivana greška:', error);\n    process.exit(1);\n  });\n}\n\nexport default backupDatabaseToJson;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\scripts\\createSystemManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\scripts\\fix-activity-participation-data.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1169,1172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1169,1172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import prisma from '../utils/prisma.js';\n\n/**\n * Skripta za ispravak podataka u tablici ActivityParticipation:\n * - Ispravlja formate start_time i end_time da budu pravi datumi umjesto brojeva\n * - Postavlja recognition_override na 100% za sve zapise gdje je null\n */\nasync function fixActivityParticipationData() {\n  try {\n    console.log('Započinjem ispravak podataka u tablici ActivityParticipation...');\n\n    // 1. Dohvati sve zapise sudjelovanja\n    const participations = await prisma.activityParticipation.findMany();\n    console.log(`Pronađeno ${participations.length} zapisa sudjelovanja za obradu.`);\n\n    // 2. Za svaki zapis, dohvati aktivnost i ispravno postavi start_time i end_time\n    for (const participation of participations) {\n      const activity = await prisma.activity.findUnique({\n        where: { activity_id: participation.activity_id }\n      });\n\n      if (!activity) {\n        console.log(`Aktivnost ${participation.activity_id} nije pronađena. Preskačem...`);\n        continue;\n      }\n\n      console.log(`Obrađujem sudjelovanje ID: ${participation.participation_id}`);\n\n      // 3. Pripremamo podatke za ažuriranje\n      const updateData: any = {\n        recognition_override: 100 // Postavljamo na 100% za sve\n      };\n\n      // Ako aktivnost ima stvarne datume, koristimo njih\n      if (activity.actual_start_time) {\n        updateData.start_time = new Date(activity.actual_start_time);\n      } else if (activity.start_date) {\n        // Ako nema stvarnog početka, koristimo planirani datum\n        updateData.start_time = new Date(activity.start_date);\n      }\n\n      if (activity.actual_end_time) {\n        updateData.end_time = new Date(activity.actual_end_time);\n      }\n\n      // 4. Ažuriramo zapis u bazi\n      await prisma.activityParticipation.update({\n        where: { participation_id: participation.participation_id },\n        data: updateData\n      });\n\n      console.log(`Uspješno ažurirano sudjelovanje ID: ${participation.participation_id}`);\n    }\n\n    console.log('Migracija je uspješno završena!');\n  } catch (error) {\n    console.error('Došlo je do greške prilikom migracije:', error);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\n// Pokreni skriptu\nfixActivityParticipationData()\n  .then(() => console.log('Skripta je završila s izvršavanjem.'))\n  .catch((e) => console.error('Neočekivana greška:', e));\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\scripts\\restoreDatabase.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":36,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":65,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2059,2062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2059,2062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6720,6723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6720,6723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// scripts/restoreDatabase.ts\n// Skripta za vraćanje sigurnosne kopije baze podataka\nimport { PrismaClient } from '@prisma/client';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport dotenv from 'dotenv';\nimport readline from 'readline';\n\n// Učitaj .env varijable\ndotenv.config();\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst prisma = new PrismaClient();\n\n// Funkcija za čitanje korisničkog unosa\nfunction askQuestion(query: string): Promise<string> {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n\n  return new Promise(resolve => rl.question(query, ans => {\n    rl.close();\n    resolve(ans);\n  }));\n}\n\n// Funkcija za prikaz dostupnih sigurnosnih kopija\nasync function listBackups() {\n  const backupDir = path.join(__dirname, '..', '..', 'backups');\n  \n  try {\n    await fs.access(backupDir);\n  } catch (error) {\n    console.log('Direktorij za sigurnosne kopije ne postoji.');\n    return [];\n  }\n  \n  const files = await fs.readdir(backupDir);\n  const jsonFiles = files.filter(file => file.endsWith('.json'));\n  \n  if (jsonFiles.length === 0) {\n    console.log('Nema dostupnih sigurnosnih kopija.');\n    return [];\n  }\n  \n  console.log('Dostupne sigurnosne kopije:');\n  jsonFiles.forEach((file, index) => {\n    console.log(`${index + 1}. ${file}`);\n  });\n  \n  return jsonFiles.map(file => path.join(backupDir, file));\n}\n\n// Funkcija za vraćanje sigurnosne kopije iz JSON datoteke\nasync function restoreFromJson(backupFilePath: string): Promise<boolean> {\n  try {\n    console.log(`Učitavanje sigurnosne kopije iz: ${backupFilePath}`);\n    \n    // Provjeri postoji li datoteka\n    try {\n      await fs.access(backupFilePath);\n    } catch (error) {\n      throw new Error(`Datoteka sigurnosne kopije ne postoji: ${backupFilePath}`);\n    }\n    \n    // Učitaj sadržaj datoteke\n    const backupContent = await fs.readFile(backupFilePath, 'utf8');\n    const backup: { timestamp: string; data: Record<string, any[]> } = JSON.parse(backupContent);\n    \n    if (!backup.data) {\n      throw new Error('Nevažeći format sigurnosne kopije: nedostaje polje \"data\"');\n    }\n    \n    console.log(`Sigurnosna kopija kreirana: ${backup.timestamp}`);\n    \n    // Potvrda korisnika prije brisanja podataka\n    const answer = await askQuestion(\n      'UPOZORENJE: Vraćanje sigurnosne kopije će obrisati sve postojeće podatke u bazi. Želite li nastaviti? (da/ne): '\n    );\n    \n    if (answer.toLowerCase() !== 'da') {\n      console.log('Vraćanje sigurnosne kopije prekinuto.');\n      return false;\n    }\n    \n    // Započni transakciju\n    console.log('Započinjem vraćanje sigurnosne kopije...');\n    \n    await prisma.$transaction(async (tx) => {\n      // Obriši postojeće podatke (obrnutim redoslijedom zbog stranih ključeva)\n      console.log('Brišem postojeće podatke...');\n      \n      // Brisanje podataka obrnutim redoslijedom od stvaranja (zbog stranih ključeva)\n      await tx.refresh_tokens.deleteMany({});\n      await tx.memberPermissions.deleteMany({});\n      await tx.auditLog.deleteMany({});\n      await tx.annualStatistics.deleteMany({});\n      await tx.cardNumber.deleteMany({});\n      await tx.stampInventory.deleteMany({});\n      await tx.messageRecipientStatus.deleteMany({});\n      await tx.memberMessage.deleteMany({});\n      await tx.membershipPeriod.deleteMany({});\n      await tx.membershipDetails.deleteMany({});\n      await tx.activityParticipation.deleteMany({});\n      await tx.activity.deleteMany({});\n      await tx.activityType.deleteMany({});\n      await tx.member.deleteMany({});\n      \n      // Zadrži sistemske postavke ako postoje\n      const existingSettings = await tx.systemSettings.findFirst({\n        where: { id: 'default' }\n      });\n      \n      if (!existingSettings && backup.data.systemSettings && backup.data.systemSettings.length > 0) {\n        await tx.systemSettings.create({\n          data: backup.data.systemSettings[0]\n        });\n      }\n      \n      console.log('Postojeći podaci obrisani.');\n      \n      // Vraćanje podataka\n      console.log('Vraćam podatke iz sigurnosne kopije...');\n      \n      // Vraćanje članova\n      if (backup.data.members && backup.data.members.length > 0) {\n        for (const member of backup.data.members) {\n          await tx.member.create({\n            data: {\n              ...member,\n              // Izbjegavamo probleme s datumima pretvarajući ih u Date objekte\n              created_at: member.created_at ? new Date(member.created_at) : undefined,\n              updated_at: member.updated_at ? new Date(member.updated_at) : undefined,\n              date_of_birth: member.date_of_birth ? new Date(member.date_of_birth) : undefined,\n              last_login: member.last_login ? new Date(member.last_login) : undefined,\n              profile_image_updated_at: member.profile_image_updated_at ? new Date(member.profile_image_updated_at) : undefined,\n              locked_until: member.locked_until ? new Date(member.locked_until) : undefined,\n              last_failed_login: member.last_failed_login ? new Date(member.last_failed_login) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.members.length} članova`);\n      }\n      \n      // Vraćanje tipova aktivnosti\n      if (backup.data.activityTypes && backup.data.activityTypes.length > 0) {\n        for (const activityType of backup.data.activityTypes) {\n          await tx.activityType.create({\n            data: {\n              ...activityType,\n              created_at: activityType.created_at ? new Date(activityType.created_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.activityTypes.length} tipova aktivnosti`);\n      }\n      \n      // Vraćanje aktivnosti\n      if (backup.data.activities && backup.data.activities.length > 0) {\n        for (const activity of backup.data.activities) {\n          await tx.activity.create({\n            data: {\n              ...activity,\n              start_date: activity.start_date ? new Date(activity.start_date) : undefined,\n              end_date: activity.end_date ? new Date(activity.end_date) : undefined,\n              created_at: activity.created_at ? new Date(activity.created_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.activities.length} aktivnosti`);\n      }\n      \n      // Vraćanje sudionika aktivnosti\n      if (backup.data.activityParticipants && backup.data.activityParticipants.length > 0) {\n        for (const participant of backup.data.activityParticipants) {\n          await tx.activityParticipation.create({ data: participant as any }); // ISPRAVAK\n        }\n        console.log(`Vraćeno ${backup.data.activityParticipants.length} sudionika aktivnosti`);\n      }\n      \n      // Vraćanje detalja članstva\n      if (backup.data.membershipDetails && backup.data.membershipDetails.length > 0) {\n        for (const details of backup.data.membershipDetails) {\n          await tx.membershipDetails.create({\n            data: {\n              ...details,\n              fee_payment_date: details.fee_payment_date ? new Date(details.fee_payment_date) : undefined,\n              active_until: details.active_until ? new Date(details.active_until) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.membershipDetails.length} detalja članstva`);\n      }\n      \n      // Vraćanje perioda članstva\n      if (backup.data.membershipPeriods && backup.data.membershipPeriods.length > 0) {\n        for (const period of backup.data.membershipPeriods) {\n          await tx.membershipPeriod.create({\n            data: {\n              ...period,\n              start_date: period.start_date ? new Date(period.start_date) : undefined,\n              end_date: period.end_date ? new Date(period.end_date) : undefined,\n              created_at: period.created_at ? new Date(period.created_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.membershipPeriods.length} perioda članstva`);\n      }\n      \n      // Vraćanje poruka članova\n      if (backup.data.memberMessages && backup.data.memberMessages.length > 0) {\n        for (const message of backup.data.memberMessages) {\n          await tx.memberMessage.create({\n            data: {\n              ...message,\n              created_at: message.created_at ? new Date(message.created_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.memberMessages.length} poruka članova`);\n      }\n      \n      // Vraćanje statusa primatelja poruka\n      if (backup.data.messageRecipientStatuses && backup.data.messageRecipientStatuses.length > 0) {\n        for (const status of backup.data.messageRecipientStatuses) {\n          await tx.messageRecipientStatus.create({\n            data: {\n              ...status,\n              created_at: status.created_at ? new Date(status.created_at) : undefined,\n              read_at: status.read_at ? new Date(status.read_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.messageRecipientStatuses.length} statusa primatelja poruka`);\n      }\n      \n      // Vraćanje inventara markica\n      if (backup.data.stampInventory && backup.data.stampInventory.length > 0) {\n        for (const inventory of backup.data.stampInventory) {\n          await tx.stampInventory.create({\n            data: {\n              ...inventory,\n              last_updated: inventory.last_updated ? new Date(inventory.last_updated) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.stampInventory.length} inventara markica`);\n      }\n      \n      // Vraćanje brojeva iskaznica\n      if (backup.data.cardNumbers && backup.data.cardNumbers.length > 0) {\n        for (const cardNumber of backup.data.cardNumbers) {\n          await tx.cardNumber.create({\n            data: {\n              ...cardNumber,\n              created_at: cardNumber.created_at ? new Date(cardNumber.created_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.cardNumbers.length} brojeva iskaznica`);\n      }\n      \n      // Vraćanje potrošenih brojeva kartica\n      if (backup.data.consumedCardNumbers && backup.data.consumedCardNumbers.length > 0) {\n        for (const consumed of backup.data.consumedCardNumbers) {\n          await tx.consumedCardNumber.create({\n            data: {\n              ...consumed,\n              consumed_at: consumed.consumed_at ? new Date(consumed.consumed_at) : undefined,\n              issued_at: consumed.issued_at ? new Date(consumed.issued_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.consumedCardNumbers.length} potrošenih brojeva kartica`);\n      }\n      \n      // Vraćanje queue-a za promjenu lozinke\n      if (backup.data.passwordUpdateQueue && backup.data.passwordUpdateQueue.length > 0) {\n        for (const queueItem of backup.data.passwordUpdateQueue) {\n          await tx.password_update_queue.create({\n            data: {\n              ...queueItem,\n              created_at: queueItem.created_at ? new Date(queueItem.created_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.passwordUpdateQueue.length} zahtjeva za promjenu lozinke`);\n      }\n      \n      // Vraćanje godišnjih statistika\n      if (backup.data.annualStatistics && backup.data.annualStatistics.length > 0) {\n        for (const statistics of backup.data.annualStatistics) {\n          await tx.annualStatistics.create({\n            data: {\n              ...statistics,\n              created_at: statistics.created_at ? new Date(statistics.created_at) : undefined,\n              updated_at: statistics.updated_at ? new Date(statistics.updated_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.annualStatistics.length} godišnjih statistika`);\n      }\n      \n      // Vraćanje audit logova\n      if (backup.data.auditLogs && backup.data.auditLogs.length > 0) {\n        for (const log of backup.data.auditLogs) {\n          await tx.auditLog.create({\n            data: {\n              ...log,\n              created_at: log.created_at ? new Date(log.created_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.auditLogs.length} audit logova`);\n      }\n      \n      // Vraćanje dozvola članova\n      if (backup.data.memberPermissions && backup.data.memberPermissions.length > 0) {\n        for (const permission of backup.data.memberPermissions) {\n          await tx.memberPermissions.create({\n            data: {\n              ...permission,\n              created_at: permission.created_at ? new Date(permission.created_at) : undefined,\n              updated_at: permission.updated_at ? new Date(permission.updated_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.memberPermissions.length} dozvola članova`);\n      }\n      \n      // Vraćanje refresh tokena\n      if (backup.data.refreshTokens && backup.data.refreshTokens.length > 0) {\n        for (const token of backup.data.refreshTokens) {\n          await tx.refresh_tokens.create({\n            data: {\n              ...token,\n              created_at: token.created_at ? new Date(token.created_at) : undefined,\n              expires_at: token.expires_at ? new Date(token.expires_at) : undefined\n            }\n          });\n        }\n        console.log(`Vraćeno ${backup.data.refreshTokens.length} refresh tokena`);\n      }\n    }, {\n      maxWait: 60000, // 60 sekundi maksimalno čekanje\n      timeout: 120000 // 120 sekundi timeout\n    });\n    \n    console.log('Sigurnosna kopija uspješno vraćena!');\n    return true;\n  } catch (error: unknown) {\n    console.error('Greška prilikom vraćanja sigurnosne kopije:', error);\n    return false;\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\n// Glavna funkcija\nasync function main() {\n  console.log('=== ALAT ZA VRAĆANJE SIGURNOSNE KOPIJE ===');\n  \n  const backupFiles = await listBackups();\n  \n  if (backupFiles.length === 0) {\n    console.log('Nema dostupnih sigurnosnih kopija za vraćanje.');\n    return;\n  }\n  \n  const backupIndex = await askQuestion(\n    `Unesite broj sigurnosne kopije koju želite vratiti (1-${backupFiles.length}) ili 'q' za izlaz: `\n  );\n  \n  if (backupIndex.toLowerCase() === 'q') {\n    console.log('Vraćanje sigurnosne kopije prekinuto.');\n    return;\n  }\n  \n  const index = parseInt(backupIndex, 10) - 1;\n  \n  if (isNaN(index) || index < 0 || index >= backupFiles.length) {\n    console.log('Nevažeći unos. Vraćanje sigurnosne kopije prekinuto.');\n    return;\n  }\n  \n  const selectedBackup = backupFiles[index];\n  const success = await restoreFromJson(selectedBackup);\n  \n  if (success) {\n    console.log('Vraćanje sigurnosne kopije uspješno završeno.');\n  } else {\n    console.log('Vraćanje sigurnosne kopije nije uspjelo.');\n  }\n}\n\n// Ako se skripta pokreće direktno, izvrši glavni program\nif (process.argv[1] === fileURLToPath(import.meta.url)) {\n  main().catch(error => {\n    console.error('Neočekivana greška:', error);\n    process.exit(1);\n  });\n}\n\nexport { restoreFromJson, listBackups };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\scripts\\scheduledBackup.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":23,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// scripts/scheduledBackup.ts\n// Skripta za automatsko zakazivanje sigurnosnih kopija\nimport backupDatabaseToJson from './backupDatabase.js';\nimport dotenv from 'dotenv';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Učitaj .env varijable\ndotenv.config();\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Funkcija za zapisivanje log poruka\nasync function logMessage(message: string) {\n  const logDir = process.env.NODE_ENV === 'production' \n    ? '/tmp/promina-drnis-logs' \n    : path.join(__dirname, '..', '..', 'logs');\n  \n  try {\n    await fs.access(logDir);\n  } catch (error) {\n    // Direktorij ne postoji, kreiraj ga\n    await fs.mkdir(logDir, { recursive: true });\n  }\n  \n  const now = new Date();\n  const logFile = path.join(logDir, `backup_${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}.log`);\n  \n  const timestamp = now.toISOString();\n  const logEntry = `[${timestamp}] ${message}\\n`;\n  \n  try {\n    await fs.appendFile(logFile, logEntry);\n  } catch (error) {\n    console.error('Greška prilikom zapisivanja u log datoteku:', error);\n  }\n}\n\n// Glavna funkcija za pokretanje sigurnosne kopije\nasync function runScheduledBackup() {\n  try {\n    await logMessage('Započinjem zakazanu sigurnosnu kopiju...');\n    \n    const result = await backupDatabaseToJson();\n    \n    if (result.success) {\n      await logMessage(`Sigurnosna kopija uspješno kreirana: ${result.fileName}`);\n    } else {\n      await logMessage(`Greška prilikom stvaranja sigurnosne kopije: ${result.error}`);\n    }\n    \n    return result;\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    await logMessage(`Neočekivana greška prilikom stvaranja sigurnosne kopije: ${errorMessage}`);\n    throw error;\n  }\n}\n\n// Ako se skripta pokreće direktno, izvrši sigurnosnu kopiju\nif (process.argv[1] === fileURLToPath(import.meta.url)) {\n  runScheduledBackup().then(result => {\n    if (result.success) {\n      console.log('Zakazana sigurnosna kopija uspješno kreirana');\n      process.exit(0);\n    } else {\n      console.error('Greška prilikom stvaranja zakazane sigurnosne kopije');\n      process.exit(1);\n    }\n  }).catch(error => {\n    console.error('Neočekivana greška:', error);\n    process.exit(1);\n  });\n}\n\nexport default runScheduledBackup;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\activities.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\audit.service.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[434,437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[434,437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\auth.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\email.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\equipment.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":60,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":76,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import equipmentRepository from \"../repositories/equipment.repository.js\";\nimport memberRepository from \"../repositories/member.repository.js\";\nimport auditService from \"./audit.service.js\";\nimport { DatabaseError } from \"../utils/errors.js\";\nimport { PerformerType } from '@prisma/client';\n\n// Helper funkcije izdvojene izvan objekta kako bi se izbjegla self-referential tipizacija\nfunction getGenderFromMember(memberGender: string | undefined): 'male' | 'female' {\n    if (!memberGender) {\n        throw new Error('Member gender is required');\n    }\n    switch (memberGender.toLowerCase()) {\n        case 'male':\n            return 'male';\n        case 'female':\n            return 'female';\n        default:\n            throw new Error(`Invalid member gender: ${memberGender}`);\n    }\n}\n\nfunction getEquipmentDeliveryField(equipmentType: string): string {\n    switch (equipmentType) {\n        case 'tshirt':\n            return 'tshirt_delivered';\n        case 'shell_jacket':\n            return 'shell_jacket_delivered';\n        case 'hat':\n            return 'hat_delivered';\n        default:\n            throw new Error(`Unknown equipment type: ${equipmentType}`);\n    }\n}\n\nfunction getEquipmentSizeField(equipmentType: string): string {\n    switch (equipmentType) {\n        case 'tshirt':\n            return 'tshirt_size';\n        case 'shell_jacket':\n            return 'shell_jacket_size';\n        case 'hat':\n            return 'hat_size';\n        default:\n            throw new Error(`Unknown equipment type: ${equipmentType}`);\n    }\n}\n\nconst equipmentService = {\n    /**\n     * Dohvaća status inventara opreme s kalkulacijom remaining\n     */\n    async getInventoryStatus() {\n        try {\n            const inventory = await equipmentRepository.getInventory();\n            return inventory.map((item) => ({\n                ...item,\n                remaining: item.initial_count - item.issued_count - item.gift_count,\n                total_distributed: item.issued_count + item.gift_count\n            }));\n        } catch (error) {\n            throw new DatabaseError(\"Error fetching equipment inventory\");\n        }\n    },\n\n    /**\n     * Dohvaća status inventara za određeni tip opreme\n     */\n    async getInventoryStatusByType(equipmentType: string) {\n        try {\n            const inventory = await equipmentRepository.getInventoryByType(equipmentType);\n            return inventory.map((item) => ({\n                ...item,\n                remaining: item.initial_count - item.issued_count - item.gift_count,\n                total_distributed: item.issued_count + item.gift_count\n            }));\n        } catch (error) {\n            throw new DatabaseError(`Error fetching equipment inventory for type ${equipmentType}`);\n        }\n    },\n\n    /**\n     * Ažurira početno stanje inventara za određenu kombinaciju\n     */\n    async updateInitialCount(\n        equipmentType: string,\n        size: string,\n        gender: string,\n        count: number\n    ) {\n        try {\n            if (count < 0) {\n                throw new Error(\"Initial count cannot be negative\");\n            }\n\n            // Provjeri trenutno stanje\n            const currentInventory = await equipmentRepository.getInventoryByTypeAndDetails(\n                equipmentType, size, gender\n            );\n\n            if (currentInventory) {\n                const totalDistributed = currentInventory.issued_count + currentInventory.gift_count;\n                if (count < totalDistributed) {\n                    throw new Error(\n                        `New count (${count}) cannot be less than already distributed equipment (${totalDistributed})`\n                    );\n                }\n            }\n\n            await equipmentRepository.updateInventory(equipmentType, size, gender, count);\n        } catch (error) {\n            throw new DatabaseError(\n                \"Error updating equipment inventory: \" +\n                (error instanceof Error ? error.message : \"Unknown error\")\n            );\n        }\n    },\n\n\n\n    /**\n     * Označava opremu kao isporučenu članu (glavna funkcija)\n     */\n    async markEquipmentAsDelivered(\n        memberId: number,\n        equipmentType: string,\n        performerId: number,\n        performerType?: PerformerType\n    ): Promise<void> {\n        try {\n            // Dohvati member podatke\n            const member = await memberRepository.findById(memberId);\n            if (!member) {\n                throw new Error(\"Member not found\");\n            }\n\n            // Provjeri ima li member veličinu za ovaj tip opreme\n            const sizeField = getEquipmentSizeField(equipmentType);\n            const memberSize = member[sizeField as keyof typeof member] as unknown as string | null | undefined;\n\n            if (!memberSize) {\n                throw new Error(`Member does not have ${equipmentType} size specified`);\n            }\n\n            // Provjeri je li oprema već isporučena\n            const deliveryField = getEquipmentDeliveryField(equipmentType);\n            const alreadyDelivered = member[deliveryField as keyof typeof member] as unknown as boolean | undefined;\n\n            if (alreadyDelivered) {\n                throw new Error(`${equipmentType} already delivered to member ${memberId}`);\n            }\n\n            // Određi spol za inventory\n            const memberGender = getGenderFromMember(member.gender);\n\n            // Provjeri dostupnost u inventaru\n            const inventory = await equipmentRepository.getInventoryByTypeAndDetails(\n                equipmentType, memberSize, memberGender\n            );\n\n            if (!inventory) {\n                throw new Error(\n                    `No inventory found for ${equipmentType}-${memberSize}-${memberGender}`\n                );\n            }\n\n            const remaining = inventory.initial_count - inventory.issued_count - inventory.gift_count;\n            if (remaining <= 0) {\n                throw new Error(\n                    `No ${equipmentType} (${memberSize}, ${memberGender}) available in inventory`\n                );\n            }\n\n            // Ažuriraj inventory (povećaj issued_count)\n            await equipmentRepository.incrementIssuedCount(equipmentType, memberSize, memberGender);\n\n            // Ažuriraj member podatke (označi kao isporučeno)\n            const memberUpdateData = {\n                [deliveryField]: true\n            };\n            await memberRepository.update(memberId, memberUpdateData);\n\n            // Logiraj akciju\n            await auditService.logAction(\n                'DELIVER_EQUIPMENT',\n                performerId,\n                `Delivered ${equipmentType} (${memberSize}, ${memberGender}) to member ${memberId}`,\n                undefined,\n                'success',\n                memberId,\n                performerType\n            );\n\n            console.log(`Equipment delivered: ${equipmentType} to member ${memberId}`);\n        } catch (error) {\n            throw new DatabaseError(\n                \"Error marking equipment as delivered: \" +\n                (error instanceof Error ? error.message : \"Unknown error\")\n            );\n        }\n    },\n\n    /**\n     * Poništava isporuku opreme (vraća u inventory)\n     */\n    async unmarkEquipmentAsDelivered(\n        memberId: number,\n        equipmentType: string,\n        performerId: number,\n        performerType?: PerformerType\n    ): Promise<void> {\n        try {\n            // Dohvati member podatke\n            const member = await memberRepository.findById(memberId);\n            if (!member) {\n                throw new Error(\"Member not found\");\n            }\n\n            // Provjeri je li oprema uopće isporučena\n            const deliveryField = getEquipmentDeliveryField(equipmentType);\n            const isDelivered = member[deliveryField as keyof typeof member] as unknown as boolean | undefined;\n\n            if (!isDelivered) {\n                throw new Error(`${equipmentType} is not marked as delivered to member ${memberId}`);\n            }\n\n            // Dohvati veličinu\n            const sizeField = getEquipmentSizeField(equipmentType);\n            const memberSize = member[sizeField as keyof typeof member] as unknown as string | null | undefined;\n\n            if (!memberSize) {\n                throw new Error(`Member does not have ${equipmentType} size specified`);\n            }\n\n            // Određi spol za inventory\n            const memberGender = getGenderFromMember(member.gender);\n\n            // Ažuriraj inventory (smanji issued_count)\n            await equipmentRepository.decrementIssuedCount(equipmentType, memberSize, memberGender);\n\n            // Ažuriraj member podatke (ukloni oznaku isporuke)\n            const memberUpdateData = {\n                [deliveryField]: false\n            };\n            await memberRepository.update(memberId, memberUpdateData);\n\n            // Logiraj akciju\n            await auditService.logAction(\n                'UNDELIVER_EQUIPMENT',\n                performerId,\n                `Returned ${equipmentType} (${memberSize}, ${memberGender}) from member ${memberId}`,\n                undefined,\n                'success',\n                memberId,\n                performerType\n            );\n\n            console.log(`Equipment returned: ${equipmentType} from member ${memberId}`);\n        } catch (error) {\n            throw new DatabaseError(\n                \"Error unmarking equipment as delivered: \" +\n                (error instanceof Error ? error.message : \"Unknown error\")\n            );\n        }\n    },\n\n    /**\n     * Izdaje opremu kao poklon (povećava gift_count)\n     */\n    async issueEquipmentAsGift(\n        equipmentType: string,\n        size: string,\n        gender: string,\n        performerId: number,\n        notes?: string,\n        performerType?: PerformerType\n    ): Promise<void> {\n        try {\n            // Provjeri dostupnost u inventaru\n            const inventory = await equipmentRepository.getInventoryByTypeAndDetails(\n                equipmentType, size, gender\n            );\n\n            if (!inventory) {\n                throw new Error(\n                    `No inventory found for ${equipmentType}-${size}-${gender}`\n                );\n            }\n\n            const remaining = inventory.initial_count - inventory.issued_count - inventory.gift_count;\n            if (remaining <= 0) {\n                throw new Error(\n                    `No ${equipmentType} (${size}, ${gender}) available in inventory`\n                );\n            }\n\n            // Ažuriraj inventory (povećaj gift_count)\n            await equipmentRepository.incrementGiftCount(equipmentType, size, gender);\n\n            // Logiraj akciju\n            const logMessage = notes\n                ? `Issued ${equipmentType} (${size}, ${gender}) as gift. Notes: ${notes}`\n                : `Issued ${equipmentType} (${size}, ${gender}) as gift`;\n\n            await auditService.logAction(\n                'GIFT_EQUIPMENT',\n                performerId,\n                logMessage,\n                undefined,\n                'success',\n                undefined, // Nema specific member_id za poklone\n                performerType\n            );\n\n            console.log(`Equipment gifted: ${equipmentType} (${size}, ${gender})`);\n        } catch (error) {\n            throw new DatabaseError(\n                \"Error issuing equipment as gift: \" +\n                (error instanceof Error ? error.message : \"Unknown error\")\n            );\n        }\n    },\n\n    /**\n     * Poništava poklon opreme (vraća u inventory)\n     */\n    async ungiftEquipment(\n        equipmentType: string,\n        size: string,\n        gender: string,\n        performerId: number,\n        notes?: string,\n        performerType?: PerformerType\n    ): Promise<void> {\n        try {\n            // Provjeri postoji li inventory zapis\n            const inventory = await equipmentRepository.getInventoryByTypeAndDetails(\n                equipmentType, size, gender\n            );\n\n            if (!inventory) {\n                throw new Error(\n                    `No inventory found for ${equipmentType}-${size}-${gender}`\n                );\n            }\n\n            if (inventory.gift_count <= 0) {\n                throw new Error(\n                    `No gifts to return for ${equipmentType} (${size}, ${gender})`\n                );\n            }\n\n            // Ažuriraj inventory (smanji gift_count)\n            await equipmentRepository.decrementGiftCount(equipmentType, size, gender);\n\n            // Logiraj akciju\n            const logMessage = notes\n                ? `Returned gift ${equipmentType} (${size}, ${gender}) to inventory. Notes: ${notes}`\n                : `Returned gift ${equipmentType} (${size}, ${gender}) to inventory`;\n\n            await auditService.logAction(\n                'UNGIFT_EQUIPMENT',\n                performerId,\n                logMessage,\n                undefined,\n                'success',\n                undefined, // Nema specific member_id za poklone\n                performerType\n            );\n\n            console.log(`Equipment gift returned: ${equipmentType} (${size}, ${gender})`);\n        } catch (error) {\n            throw new DatabaseError(\n                \"Error returning gifted equipment: \" +\n                (error instanceof Error ? error.message : \"Unknown error\")\n            );\n        }\n    },\n\n\n\n    /**\n     * Dohvaća statistike opreme za određenog člana\n     */\n    async getMemberEquipmentStatus(memberId: number) {\n        try {\n            const member = await memberRepository.findById(memberId);\n            if (!member) {\n                throw new Error(\"Member not found\");\n            }\n\n            return {\n                member_id: memberId,\n                tshirt: {\n                    size: member['tshirt_size'],\n                    delivered: member['tshirt_delivered'] || false\n                },\n                shell_jacket: {\n                    size: member['shell_jacket_size'],\n                    delivered: member['shell_jacket_delivered'] || false\n                },\n                hat: {\n                    size: member['hat_size'],\n                    delivered: member['hat_delivered'] || false\n                }\n            };\n        } catch (error) {\n            throw new DatabaseError(\n                \"Error fetching member equipment status: \" +\n                (error instanceof Error ? error.message : \"Unknown error\")\n            );\n        }\n    }\n}\n\nexport default equipmentService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\member.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MemberWithExtendedDetails' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MemberWithTotalHours' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updatedCoreMember' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":186,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/member.service.ts\nimport membershipService from './membership.service.js';\nimport memberRepository, { MemberStats, MemberCreateData, MemberUpdateData } from '../repositories/member.repository.js';\nimport { Member } from '../shared/types/member.js';\nimport bcrypt from 'bcrypt';\nimport { Request } from 'express';\nimport membershipRepository from '../repositories/membership.repository.js';\nimport authRepository from '../repositories/auth.repository.js';\nimport auditService from './audit.service.js';\nimport { MembershipTypeEnum } from '../shared/types/member.js';\nimport { getCurrentDate } from '../utils/dateUtils.js';\nimport { differenceInMinutes } from 'date-fns';\nimport prisma from '../utils/prisma.js';\nimport type { PrismaClient } from '@prisma/client';\n\n// Tip za Prisma transakcijski klijent\ntype TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use' | '$extends'>;\n\ninterface MemberWithActivities extends Member {\n    activities?: {\n        activity_id: number;\n        name: string;\n        date: string;\n        hours_spent: number | null;\n    }[];\n}\n\n// Sučelje za člana s dodatnim poljima koja dolaze iz repozitorija\ninterface MemberWithExtendedDetails extends Member {\n    card_number?: string;\n    fee_payment_year?: number;\n    card_stamp_issued?: boolean;\n    fee_payment_date?: string | Date;\n    next_year_stamp_issued?: boolean;\n    calculated_full_name?: string;\n}\n\ninterface MemberWithTotalHours extends Member {\n    total_hours: number;\n}\n\nexport function mapMembershipTypeToEnum(value: string | MembershipTypeEnum | undefined): MembershipTypeEnum {\n  if (typeof value === 'string') {\n    if (value === 'regular') return MembershipTypeEnum.Regular;\n    if (value === 'supporting') return MembershipTypeEnum.Supporting;\n    if (value === 'honorary') return MembershipTypeEnum.Honorary;\n  }\n  return value as MembershipTypeEnum;\n}\n\n/**\n * Izračunava ukupne sate (u minutama) za člana i sprema ih u bazu.\n * Prioritet za izračun:\n * 1. manual_hours ako postoji (pretvoreno u minute)\n * 2. razlika između actual_start_time i actual_end_time ako manual_hours ne postoji\n * \n * @param memberId ID člana\n * @param prismaClient Opcionalni Prisma transakcijski klijent za izvršavanje unutar transakcije\n */\nexport const updateMemberTotalHours = async (memberId: number, prismaClient: TransactionClient = prisma): Promise<void> => {\n  try {\n    // Koristimo Prisma umjesto direktnog SQL upita\n    const participations = await prismaClient.activityParticipation.findMany({\n      where: {\n        member_id: memberId,\n        activity: {\n          status: 'COMPLETED'\n        }\n      },\n      include: {\n        activity: {\n          select: {\n            actual_start_time: true,\n            actual_end_time: true,\n            recognition_percentage: true // Dohvaćamo i postotak priznavanja s aktivnosti\n          }\n        }\n      }\n    });\n\n    const totalMinutes = participations.reduce((acc: number, p: {\n      manual_hours: number | null;\n      recognition_override?: number | null;\n      activity: {\n        actual_start_time: Date | string | null;\n        actual_end_time: Date | string | null;\n        recognition_percentage?: number | null;\n      };\n    }) => {\n      let minuteValue = 0;\n\n      // Prioritet imaju manual_hours ako su postavljeni\n      if (p.manual_hours !== null && p.manual_hours !== undefined) {\n        minuteValue = Math.round(p.manual_hours * 60);\n      } \n      // Ako manual_hours nije postavljen, računamo iz actual_start_time i actual_end_time\n      else if (p.activity.actual_start_time && p.activity.actual_end_time) {\n        const minutes = differenceInMinutes(\n          new Date(p.activity.actual_end_time),\n          new Date(p.activity.actual_start_time)\n        );\n        minuteValue = minutes > 0 ? minutes : 0;\n      }\n\n      // Odredi koji postotak primijeniti. Prioritet ima `recognition_override` s pojedinog sudjelovanja (za izlete).\n      // Ako on ne postoji, koristi se `recognition_percentage` s cijele aktivnosti (za sastanke itd.).\n      // Ako ni on ne postoji, default je 100%.\n      const finalRecognitionPercentage = p.recognition_override ?? p.activity.recognition_percentage ?? 100;\n      \n      const recognizedMinutes = Math.round(minuteValue * (finalRecognitionPercentage / 100));\n\n      return acc + recognizedMinutes;\n    }, 0);\n\n    // Ažuriraj polje total_hours u tablici članova koristeći isti prismaClient\n    await prismaClient.member.update({\n      where: { member_id: memberId },\n      data: {\n        total_hours: totalMinutes\n      }\n    });\n    \n    console.log(`Ažurirano ukupno sati za člana ${memberId}: ${totalMinutes} minuta`);\n  } catch (error) {\n    console.error(`Greška prilikom ažuriranja ukupnih sati za člana ${memberId}:`, error);\n    throw error; // Propagiramo grešku kako bi transakcija bila poništena\n  }\n}\n\nconst memberService = {\n    async getAllMembers(): Promise<Member[]> {\n        try {\n            return await memberRepository.findAll();\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error fetching members: ' + errorMessage);\n        }\n    },\n\n    async getMemberById(memberId: number): Promise<Member | null> {\n        try {\n            // Sada samo dohvaćamo člana, jer su sati već izračunati i spremljeni u bazi.\n            const member = await memberRepository.findById(memberId);\n            return member;\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error fetching member: ' + errorMessage);\n        }\n    },\n\n    async getMemberDashboardStats(memberId: number) {\n        try {\n            // I ovdje samo dohvaćamo člana, jer su sati već spremljeni u bazi.\n            const member = await this.getMemberById(memberId);\n            return member;\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error fetching member dashboard stats: ' + errorMessage);\n        }\n    },\n\n    async updateMember(memberId: number, memberData: MemberUpdateData): Promise<Member | null> {\n        const { skills, ...basicMemberData } = memberData;\n\n        try {\n            const updatedMember = await prisma.$transaction(async (tx) => {\n                // 1. Ažuriranje osnovnih podataka o članu\n                const memberToUpdate: Partial<MemberUpdateData> = { ...basicMemberData };\n\n                if (basicMemberData.first_name || basicMemberData.last_name) {\n                    const currentMember = await tx.member.findUnique({ where: { member_id: memberId } });\n                    if (!currentMember) throw new Error(\"Member not found for update\");\n\n                    const firstName = basicMemberData.first_name ?? currentMember.first_name;\n                    const lastName = basicMemberData.last_name ?? currentMember.last_name;\n                    memberToUpdate.full_name = `${firstName} ${lastName}`;\n\n                    const membershipDetails = await tx.membershipDetails.findUnique({ where: { member_id: memberId } });\n                    if (membershipDetails?.card_number) {\n                        const newPassword = `${memberToUpdate.full_name}-isk-${membershipDetails.card_number}`;\n                        memberToUpdate.password_hash = await bcrypt.hash(newPassword, 10);\n                    }\n                }\n\n                console.log('[updateMember] memberToUpdate.functions_in_society neposredno prije update:', memberToUpdate.functions_in_society);\n                const updatedCoreMember = await tx.member.update({\n                    where: { member_id: memberId },\n                    data: {\n                        first_name: memberToUpdate.first_name,\n                        last_name: memberToUpdate.last_name,\n                        full_name: memberToUpdate.full_name,\n                        nickname: memberToUpdate.nickname,\n                        date_of_birth: memberToUpdate.date_of_birth,\n                        gender: memberToUpdate.gender,\n                        street_address: memberToUpdate.street_address,\n                        city: memberToUpdate.city,\n                        oib: memberToUpdate.oib,\n                        cell_phone: memberToUpdate.cell_phone,\n                        email: memberToUpdate.email,\n                        life_status: memberToUpdate.life_status,\n                        tshirt_size: memberToUpdate.tshirt_size,\n                        shell_jacket_size: memberToUpdate.shell_jacket_size,\n                        hat_size: memberToUpdate.hat_size,\n                        membership_type: memberToUpdate.membership_type ? mapMembershipTypeToEnum(memberToUpdate.membership_type) : undefined,\n                        other_skills: memberToUpdate.other_skills, // Dodano polje koje je nedostajalo\n                        password_hash: memberToUpdate.password_hash,\n                        functions_in_society: memberToUpdate.functions_in_society,\n                    },\n                });\n\n                // 2. Ažuriranje vještina (skills)\n                if (skills) {\n                    // Prvo obriši sve postojeće vještine za ovog člana\n                    await tx.memberSkill.deleteMany({\n                        where: { member_id: memberId },\n                    });\n\n                    // Zatim dodaj nove vještine\n                    if (skills.length > 0) {\n                        const memberSkillsData = skills.map(skill => ({\n                            member_id: memberId,\n                            skill_id: skill.skill_id,\n                            is_instructor: skill.is_instructor,\n                        }));\n\n                        await tx.memberSkill.createMany({\n                            data: memberSkillsData,\n                        });\n                    }\n                }\n\n                // 3. Vrati puni objekt člana nakon svih ažuriranja\n                const finalUpdatedMember = await tx.member.findUnique({\n                    where: { member_id: memberId },\n                    include: {\n                        membership_details: true,\n                        skills: {\n                            include: {\n                                skill: true,\n                            },\n                        },\n                    },\n                });\n\n                if (!finalUpdatedMember) {\n                    throw new Error(\"Failed to fetch updated member details after transaction.\");\n                }\n\n                return finalUpdatedMember as unknown as Member;\n            });\n\n            return updatedMember;\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            console.error(`Error updating member ${memberId}:`, errorMessage);\n            throw new Error('Error updating member: ' + errorMessage);\n        }\n    },\n\n    async updateMemberRole(memberId: number, role: 'member' | 'member_administrator' | 'member_superuser'): Promise<Member> {\n        try {\n            return await memberRepository.updateRole(memberId, role);\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error updating member role: ' + errorMessage);\n        }\n    },\n\n    async getMemberStats(memberId: number): Promise<MemberStats> {\n        try {\n            const stats = await memberRepository.getStats(memberId);\n            if (!stats) {\n                throw new Error('Member stats not found');\n            }\n            return stats;\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error fetching member statistics: ' + errorMessage);\n        }\n    },\n\n\n\n    async createMember(memberData: MemberCreateData & { skills?: { skill_id: number; is_instructor?: boolean }[], other_skills?: string }): Promise<Member> {\n        const { skills, other_skills, ...basicMemberData } = memberData;\n\n        try {\n            const newMember = await prisma.$transaction(async (tx) => {\n                const registration_completed = !!(\n                    basicMemberData.first_name &&\n                    basicMemberData.last_name &&\n                    basicMemberData.date_of_birth &&\n                    basicMemberData.gender &&\n                    basicMemberData.street_address &&\n                    basicMemberData.city &&\n                    basicMemberData.oib &&\n                    basicMemberData.cell_phone &&\n                    basicMemberData.email &&\n                    basicMemberData.life_status &&\n                    basicMemberData.tshirt_size &&\n                    basicMemberData.shell_jacket_size &&\n                    basicMemberData.membership_type\n                );\n\n                const createdCoreMember = await tx.member.create({\n                    data: {\n                        first_name: basicMemberData.first_name,\n                        last_name: basicMemberData.last_name,\n                        full_name: `${basicMemberData.first_name} ${basicMemberData.last_name}`,\n                        date_of_birth: new Date(basicMemberData.date_of_birth),\n                        gender: basicMemberData.gender,\n                        street_address: basicMemberData.street_address,\n                        city: basicMemberData.city,\n                        oib: basicMemberData.oib,\n                        cell_phone: basicMemberData.cell_phone,\n                        email: basicMemberData.email,\n                        life_status: basicMemberData.life_status,\n                        tshirt_size: basicMemberData.tshirt_size,\n                        shell_jacket_size: basicMemberData.shell_jacket_size,\n                        hat_size: basicMemberData.hat_size,\n                        membership_type: mapMembershipTypeToEnum(basicMemberData.membership_type),\n                        nickname: basicMemberData.nickname,\n                        other_skills: other_skills,\n                        status: 'pending',\n                        role: 'member',\n                        registration_completed: registration_completed,\n                    },\n                });\n\n                // 2. Kreiranje vještina (skills)\n                if (skills && Array.isArray(skills) && skills.length > 0) {\n                    const skillCreations = skills.map((skill: { skill_id: number, is_instructor: boolean }) => {\n                        return tx.memberSkill.create({\n                            data: {\n                                member_id: createdCoreMember.member_id,\n                                skill_id: skill.skill_id,\n                                is_instructor: skill.is_instructor || false,\n                            },\n                        });\n                    });\n                    await Promise.all(skillCreations);\n                }\n\n                // 3. Vrati puni objekt člana nakon kreiranja\n                const finalNewMember = await tx.member.findUnique({\n                    where: { member_id: createdCoreMember.member_id },\n                    include: {\n                        membership_details: true,\n                        skills: {\n                            include: {\n                                skill: true,\n                            },\n                        },\n                    },\n                });\n\n                if (!finalNewMember) {\n                    throw new Error(\"Failed to fetch new member details after transaction.\");\n                }\n\n                return finalNewMember as unknown as Member;\n            });\n\n            return newMember;\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            console.error('Error creating member:', errorMessage);\n            throw new Error('Error creating member: ' + errorMessage);\n        }\n    },\n\n    async assignPassword(memberId: number, password: string, cardNumber: string): Promise<void> {\n        try {\n            const hashedPassword = await bcrypt.hash(password, 10);\n            await authRepository.updateMemberWithCardAndPassword(memberId, hashedPassword, cardNumber);\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error assigning password: ' + errorMessage);\n        }\n    },\n\n    async getMemberWithActivities(memberId: number): Promise<MemberWithActivities | null> {\n        try {\n            const member = await this.getMemberById(memberId);\n            if (!member) return null;\n\n            console.log(`[MEMBER] Dohvaćam aktivnosti za člana ID: ${memberId}`);\n            \n            let activitiesData = [];\n            \n            try {\n                const participations = await prisma.activityParticipation.findMany({\n                    where: {\n                        member_id: memberId\n                    },\n                    include: {\n                        activity: {\n                            select: {\n                                activity_id: true,\n                                name: true,\n                                start_date: true,\n                                actual_start_time: true,\n                                actual_end_time: true\n                            }\n                        }\n                    },\n                    orderBy: {\n                        activity: {\n                            start_date: 'desc'\n                        }\n                    }\n                });\n                \n                // Transformiramo Prisma rezultate u očekivani format\n                activitiesData = participations.map(p => ({\n                    activity_id: p.activity.activity_id,\n                    name: p.activity.name,\n                    date: p.activity.start_date,\n                    manual_hours: p.manual_hours,\n                    actual_start_time: p.activity.actual_start_time,\n                    actual_end_time: p.activity.actual_end_time\n                }));\n                \n                console.log(`[MEMBER] Dohvaćeno ${activitiesData.length} aktivnosti za člana ${memberId}`);\n            } catch (error) {\n                console.error(`[MEMBER] Greška prilikom dohvaćanja aktivnosti za člana ${memberId}:`, error);\n                throw error;\n            }\n\n            /**\n             * VAŽNA NAPOMENA:\n             * -------------------\n             * Transformacija između polja u bazi i API odgovora:\n             * \n             * Baza podataka:\n             * - U tablici activity_participations imamo kolonu manual_hours (DOUBLE PRECISION)\n             * - U tablici members imamo kolonu total_hours (ukupni sati aktivnosti u minutama)\n             * \n             * Frontend/API očekuje:\n             * - hours_spent polje po aktivnosti (umjesto manual_hours)\n             * - total_hours za ukupne sate člana\n             * \n             * Transformacija:\n             * 1. hours_spent je virtualno/izračunato polje za frontend koje se generira iz:\n             *    - manual_hours ako postoje (prioritet)\n             *    - ili iz razlike actual_start_time i actual_end_time ako nije unesen manual_hours\n             * \n             * 2. total_hours se odvojeno agregira preko updateMemberTotalHours funkcije koja također \n             *    koristi obje metode računanja, sekvencijalno za svaku aktivnost člana\n             * \n             * Svrha: Da bi podržali i ručni unos sati i automatski izračun iz vremena aktivnosti\n             */\n\n            // Procesiramo rezultate kako bi izračunali hours_spent za svaku aktivnost\n            const activitiesWithHours = activitiesData.map(activity => {\n                let hours_spent = null;\n                \n                // Prvo provjerimo postoji li manual_hours\n                if (activity.manual_hours !== null && activity.manual_hours !== undefined) {\n                    hours_spent = activity.manual_hours;\n                }\n                // Ako nema manual_hours, a postoje vremena početka i kraja, izračunaj razliku\n                else if (activity.actual_start_time && activity.actual_end_time) {\n                    const minutesDiff = differenceInMinutes(\n                        new Date(activity.actual_end_time),\n                        new Date(activity.actual_start_time)\n                    );\n                    if (minutesDiff > 0) {\n                        // Pretvori minute u sate s decimalama (npr. 90 minuta = 1.5 sati)\n                        hours_spent = Number((minutesDiff / 60).toFixed(2));\n                    }\n                }\n                \n                return {\n                    activity_id: activity.activity_id,\n                    name: activity.name,\n                    date: activity.date.toISOString().split('T')[0], // Konvertiraj Date u string format YYYY-MM-DD\n                    hours_spent\n                };\n            });\n\n            return {\n                ...member,\n                activities: activitiesWithHours\n            };\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error fetching member with activities: ' + errorMessage);\n        }\n    },\n\t\n\tasync getMemberWithDetails(memberId: number): Promise<Member | null> {\n        try {\n            const member = await memberRepository.findById(memberId);\n            if (!member) return null;\n\n            const periods = await membershipRepository.getMembershipPeriods(memberId);\n            const currentPeriod = await membershipRepository.getCurrentPeriod(memberId);\n            \n            // Frontend će sam izračunati trajanje na temelju perioda\n            member.membership_history = {\n                periods,\n                current_period: currentPeriod ?? undefined,\n            };\n\n            return member;\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error fetching member with details: ' + errorMessage);\n        }\n    },\n\n    async getMemberAnnualStats(memberId: number): Promise<Awaited<ReturnType<typeof memberRepository.getAnnualStats>>> {\n        try {\n            const stats = await memberRepository.getAnnualStats(memberId);\n            if (!stats) {\n                throw new Error('Statistika nije pronađena za ovog člana.');\n            }\n            return stats;\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error fetching member annual statistics: ' + errorMessage);\n        }\n    },\n\n    async updateMembershipFee(\n        memberId: number,\n        paymentDate: Date,\n        req: Request,\n        isRenewalPayment?: boolean\n    ): Promise<void> {\n        try {\n            const member = await this.getMemberById(memberId);\n            if (!member) {\n                throw new Error(\"Member not found\");\n            }\n    \n            const paymentMonth = paymentDate.getMonth(); // 0-11 where 10=Nov, 11=Dec\n            const currentYear = getCurrentDate().getFullYear();\n            \n            // Determine which year to assign the payment to\n            let paymentYear = currentYear;\n            \n            // Logic for determining payment year:\n            // 1. If isRenewalPayment is explicitly true, use next year (for Nov/Dec renewals)\n            // 2. If payment month is Nov (10) or Dec (11), and there's no existing payment\n            //    for this year, use current year (new memberships)\n            // 3. If payment month is Nov (10) or Dec (11), and there is an existing\n            //    current year payment, use next year (implicit renewal)\n            \n            if (isRenewalPayment) {\n              // Explicit renewal flag - use next year\n              paymentYear = currentYear + 1;\n              console.log(`Using explicit renewal: setting payment year to ${paymentYear}`);\n            } else if (paymentMonth === 10 || paymentMonth === 11) { // Nov or Dec\n              const existingYear = member?.membership_details?.fee_payment_year;\n              \n              // Check if this is potentially a renewal\n              if (existingYear && existingYear >= currentYear) {\n                // This is likely a renewal - assign to next year\n                paymentYear = currentYear + 1;\n                console.log(`Late year payment with existing current payment: setting to ${paymentYear}`);\n              } else {\n                // This is likely a new member or late payment for current year\n                paymentYear = currentYear;\n                console.log(`Late year payment for new/lapsed member: setting to ${paymentYear}`);\n              }\n            } else {\n              // Regular payment during the year - use current year\n              paymentYear = currentYear;\n              console.log(`Regular payment during year: setting to ${paymentYear}`);\n            }\n            \n            // Fix type issue - Convert the Date to ISO string for storage\n            const details = {\n              fee_payment_year: paymentYear,\n              fee_payment_date: paymentDate, // Pass the Date object directly, not a string\n            };\n    \n            await membershipRepository.updateMembershipDetails(memberId, details);\n            \n            // Call the newly added method\n            await this.updateMembershipPeriodIfNeeded(memberId, paymentDate);\n    \n            if (req.user?.id) {\n              await auditService.logAction(\n                'MEMBERSHIP_FEE_PAYMENT',\n                req.user?.id || null, // Koristimo ID iz req.user\n                `Membership fee paid for ${paymentYear}`,\n                req,\n                'success',\n                memberId,\n                req.user?.performer_type\n              );\n            }\n        } catch (error) {\n            console.error(\"Service error:\", error);\n            throw error instanceof Error ? error : new Error(String(error));\n        }\n    },\n\n    // Add the missing method\n    async updateMembershipPeriodIfNeeded(memberId: number, paymentDate: Date): Promise<void> {\n        try {\n            // Get the latest membership period for this member\n            const periods = await membershipRepository.getMembershipPeriods(memberId);\n            const currentPeriod = periods.find(p => !p.end_date);\n            \n            // If no active period exists, create a new one starting from the payment date\n            if (!currentPeriod) {\n                await membershipRepository.createMembershipPeriod(memberId, paymentDate);\n                console.log(`Created new membership period for member ${memberId}`);\n            } else {\n                console.log(`Active membership period exists for member ${memberId}, no need to create new one`);\n            }\n        } catch (error) {\n            console.error(\"Error updating membership period:\", error);\n            throw error;\n        }\n    },\n\n    async updateMembershipCard(\n        memberId: number, \n        cardNumber: string, \n        stampIssued: boolean\n    ): Promise<void> {\n        try {\n            await membershipService.updateCardDetails(memberId, cardNumber, stampIssued);\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            throw new Error('Error updating card details: ' + errorMessage);\n        }\n    },\n\n    async getMemberWithCardDetails(memberId: number) {\n        console.log(`[MEMBER] Dohvaćam detalje člana s karticom za ID: ${memberId}`);\n        \n        try {\n            const memberWithCard = await prisma.member.findUnique({\n                where: {\n                    member_id: memberId\n                },\n                include: {\n                    membership_details: {\n                        select: {\n                            card_number: true,\n                            card_stamp_issued: true,\n                            fee_payment_date: true\n                        }\n                    }\n                }\n            });\n            \n            if (!memberWithCard) {\n                console.log(`[MEMBER] Član s ID ${memberId} nije pronađen`);\n                return { rows: [] };\n            }\n\n            const { membership_details: _omit, ...memberWithoutDetails } = memberWithCard as typeof memberWithCard & { membership_details?: unknown };\n            const result = {\n                ...memberWithoutDetails,\n                card_number: memberWithCard.membership_details?.card_number || null,\n                card_stamp_issued: memberWithCard.membership_details?.card_stamp_issued || null,\n                fee_payment_date: memberWithCard.membership_details?.fee_payment_date || null\n            };\n            \n            console.log(`[MEMBER] Uspješno dohvaćeni detalji člana ${memberId} s karticom`);\n            \n            return { rows: [result] };\n        } catch (error) {\n            console.error(`[MEMBER] Greška prilikom dohvaćanja detalja člana ${memberId}:`, error);\n            throw error;\n        }\n    }\n};\n\nexport default memberService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\membership.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'paymentMonth' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":52,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'paymentDay' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":53,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":75,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'performerId' is defined but never used. Allowed unused args must match /^_/u.","line":202,"column":118,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":129},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":495,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":495,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cutoffMonth' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":535,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":535,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cutoffDay' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":536,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":536,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/membership.service.ts\nimport membershipRepository from \"../repositories/membership.repository.js\";\nimport { \n  MembershipDetails,\n  MembershipPeriod,\n  MembershipEndReason,\n} from \"../shared/types/membership.js\";\nimport { Member } from \"../shared/types/member.js\";\nimport memberRepository from \"../repositories/member.repository.js\";\nimport auditService from \"./audit.service.js\";\nimport { Request } from \"express\";\nimport prisma from \"../utils/prisma.js\";\nimport { Prisma } from \"@prisma/client\";\nimport { parseDate, getCurrentDate, formatDate } from '../utils/dateUtils.js';\nimport { updateAnnualStatistics } from './statistics.service.js';\nimport { PerformerType } from \"@prisma/client\";\n\n// Definicija tipa za tijelo zahtjeva za ažuriranje članstva\ninterface MembershipUpdatePayload {\n  paymentDate?: string;\n  cardNumber?: string;\n  stampIssued?: boolean;\n  isRenewalPayment?: boolean;\n}\n\nconst membershipService = {\n  async processFeePayment(\n    memberId: number,\n    paymentDate: Date,\n    performerId?: number,\n    isRenewalPayment?: boolean,\n    performerType?: PerformerType\n  ): Promise<Member | null> {\n    try {\n      // Get system settings\n      const settings = await prisma.systemSettings.findFirst({\n        where: { id: \"default\" },\n      });\n\n      const renewalStartDay = settings?.renewalStartDay || 31;\n\n      // Koristimo direktno Date objekt umjesto parsiranja, jer već imamo Date\n      const validPaymentDate = new Date(paymentDate);\n      validPaymentDate.setHours(12, 0, 0, 0); // Standardize time // Standardize time\n\n      const member = await memberRepository.findById(memberId);\n      if (!member) {\n        throw new Error(\"Member not found\");\n      }\n\n      const paymentYear = paymentDate.getFullYear();\n      const paymentMonth = paymentDate.getMonth();\n      const paymentDay = paymentDate.getDate();\n\n      // Create cutoff date (October 31st of current year)\n      const cutoffDate = new Date(paymentYear, 9, renewalStartDay); // Month 9 is October\n      let startDate = validPaymentDate; // Koristi stvarni datum uplate kao početni datum\n\n      // Provjeri je li ovo novi član (koji nikad nije platio članarinu)\n      // ili postojeći član koji obnavlja članstvo\n      const isNewMember = !member.membership_details?.fee_payment_date;\n\n      // Ispiši važne informacije za dijagnostiku\n      console.log(`Processing payment for member ${memberId}:`, {\n        isNewMember,\n        paymentDate: validPaymentDate,\n        cutoffDate,\n        isAfterCutoff: validPaymentDate > cutoffDate,\n      });\n\n      // Samo za postojeće članove koji produljuju članstvo:\n      // Ako je plaćanje nakon cutoff datuma, članstvo počinje sljedeće godine\n      if (validPaymentDate > cutoffDate && !isNewMember) {\n        console.log(`Payment after cutoff date for EXISTING member - counting for next year`);\n        startDate = new Date(paymentYear + 1, 0, 1); // Postavi na 1. siječnja sljedeće godine\n      } else if (validPaymentDate > cutoffDate && isNewMember) {\n        console.log(`Payment after cutoff date for NEW member - still counting for current year`);\n        // Za nove članove ne mijenjamo godinu, čak i ako je kasno u godini\n      }\n\n      await prisma.$transaction(async (tx) => {\n        console.log(`[MEMBERSHIP] Počinje transakcija za uplatu članarine člana ${memberId}`);\n        \n        // Update membership details\n        await tx.membershipDetails.upsert({\n          where: { member_id: memberId },\n          update: {\n            fee_payment_year: paymentYear,\n            fee_payment_date: validPaymentDate,\n          },\n          create: {\n            member_id: memberId,\n            fee_payment_year: paymentYear,\n            fee_payment_date: validPaymentDate,\n          }\n        });\n        console.log(`[MEMBERSHIP] Ažurirani detalji članstva za člana ${memberId}`);\n\n        // Automatski postaviti status člana na \"registered\" kad plati članarinu\n        await tx.member.update({\n          where: { member_id: memberId },\n          data: { status: 'registered' }\n        });\n        console.log(`[MEMBERSHIP] Status člana ${memberId} postavljen na \"registered\" nakon plaćanja članarine`);\n\n        // Check current period using Prisma\n        const currentPeriod = await tx.membershipPeriod.findFirst({\n          where: {\n            member_id: memberId,\n            end_date: null\n          },\n          orderBy: { start_date: 'desc' }\n        });\n\n        // Handle period management\n        if (!currentPeriod) {\n          await tx.membershipPeriod.create({\n            data: {\n              member_id: memberId,\n              start_date: validPaymentDate\n            }\n          });\n          console.log(`[MEMBERSHIP] Kreiran novi period članstva za člana ${memberId}`);\n        } else if (currentPeriod.end_reason === \"non_payment\") {\n          // End current period\n          await tx.membershipPeriod.update({\n            where: { period_id: currentPeriod.period_id },\n            data: {\n              end_date: getCurrentDate(),\n              end_reason: \"non_payment\"\n            }\n          });\n          // Create new period\n          await tx.membershipPeriod.create({\n            data: {\n              member_id: memberId,\n              start_date: validPaymentDate\n            }\n          });\n          console.log(`[MEMBERSHIP] Završen stari i kreiran novi period za člana ${memberId}`);\n        }\n        \n        console.log(`[MEMBERSHIP] Transakcija uspješno završena za člana ${memberId}`);\n      });\n\n      if (performerId) {\n        await auditService.logAction(\n          \"MEMBERSHIP_FEE_PAYMENT\",\n          performerId,\n          `Membership fee paid for ${paymentYear}`,\n          undefined,\n          \"success\",\n          memberId,\n          performerType\n        );\n      }\n\n      await updateAnnualStatistics(memberId, paymentYear);\n\n      return await memberRepository.findById(memberId);\n    } catch (error) {\n      throw new Error(\n        `Error processing fee payment: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  },\n\n  async isMembershipActive(memberId: number): Promise<boolean> {\n    try {\n      const member = await memberRepository.findById(memberId);\n      if (!member || !member.membership_details) {\n        return false;\n      }\n\n      // Ako imamo fee_payment_year, usporedimo s trenutnom godinom\n      if (member.membership_details.fee_payment_year) {\n        const currentYear = getCurrentDate().getFullYear();\n        return member.membership_details.fee_payment_year >= currentYear;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error(\"Error checking membership activity:\", error);\n      return false;\n    }\n  },\n\n  async getMembershipDetails(\n    memberId: number\n  ): Promise<MembershipDetails | undefined> {\n    try {\n      const member = await memberRepository.findById(memberId);\n      return member?.membership_details;\n    } catch (error) {\n      console.error(\"Error getting membership details:\", error);\n      return undefined;\n    }\n  },\n\n  async updateCardDetails(memberId: number, cardNumber: string | undefined, stampIssued: boolean | null | undefined, performerId?: number): Promise<void> {\n    try {\n      // Prvo dohvatimo trenutni broj kartice\n      const details = await membershipRepository.getMembershipDetails(memberId);\n      const previousCardNumber = details?.card_number;\n\n      // Ako je član imao staru karticu i mijenja broj, označi staru kao potrošenu\n      if (previousCardNumber && cardNumber !== undefined && previousCardNumber !== cardNumber && cardNumber.trim() !== \"\") {\n        const cardNumberRepository = (await import('../repositories/cardnumber.repository.js')).default;\n        await cardNumberRepository.markCardNumberConsumed(previousCardNumber, memberId);\n      }\n      console.log('==== MEMBERSHIP CARD UPDATE DETAILS ====');\n      console.log(`Member ID: ${memberId}`);\n      console.log(`Card number: \"${cardNumber}\"`);\n      console.log(`Stamp issued: ${stampIssued}`);\n\n      const member = await prisma.member.findUnique({\n        where: { member_id: memberId },\n        select: {\n          status: true,\n          registration_completed: true\n        }\n      });\n      \n      if (!member) {\n        throw new Error(`Member with ID ${memberId} not found`);\n      }\n      \n      console.log('Current member status before transaction:', member);\n\n      await prisma.$transaction(async (tx) => {\n        // Prvo ažuriramo status člana na 'registered' i registration_completed na true\n        // ako je dodijeljen broj kartice (preslikavamo ponašanje iz updateMemberWithCardAndPassword)\n        // VAŽNO: Provjeravamo da li je cardNumber stvarno dodijeljen (nije prazan string)\n        if (cardNumber !== undefined && cardNumber !== null && cardNumber.trim() !== \"\") {\n          console.log(`Updating member status for member ${memberId} to: registered and registration_completed: true`);\n          \n          // OPTIMIZACIJA: Prisma update umjesto client.query\n          const updateResult = await tx.member.update({\n            where: { member_id: memberId },\n            data: {\n              status: 'registered',\n              registration_completed: true\n            },\n            select: {\n              member_id: true,\n              status: true,\n              registration_completed: true\n            }\n          });\n          \n          console.log('Member status update result:', updateResult);\n        } else {\n          console.log(`Card number is empty or undefined, not updating member status`);\n        }\n        \n        // OPTIMIZACIJA: Prisma findUnique umjesto client.query\n        const existingMembershipDetails = await tx.membershipDetails.findUnique({\n          where: { member_id: memberId },\n          select: {\n            member_id: true,\n            card_number: true\n          }\n        });\n\n        const memberExists = !!existingMembershipDetails;\n        console.log('Membership details exist:', memberExists);\n        if (memberExists) {\n          console.log('Current card number:', existingMembershipDetails.card_number);\n        }\n        \n        // Zatim ažuriramo broj članske iskaznice\n        if (!memberExists) {\n          // OPTIMIZACIJA: Prisma create umjesto INSERT\n          console.log(`Creating new membership details for member ${memberId}, card_number: ${cardNumber}, stamp_issued: FALSE (forced)`);\n          await tx.membershipDetails.create({\n            data: {\n              member_id: memberId,\n              card_number: cardNumber || \"\",\n              card_stamp_issued: false\n            }\n          });\n        } else {\n          // Pripremi podatke za update\n          const updateData: Prisma.MembershipDetailsUpdateInput = {};\n          \n          // Ako je proslijeden broj kartice, ažuriramo ga\n          if (cardNumber !== undefined && cardNumber !== null && cardNumber.trim() !== \"\") {\n            console.log(`Updating card number for member ${memberId} to: ${cardNumber}`);\n            updateData.card_number = cardNumber.trim();\n          } else {\n            console.log(`Card number is empty or undefined, not updating card number`);\n          }\n\n          // Ako je proslijeden status markice, ažuriramo ga\n          if (stampIssued !== null && stampIssued !== undefined) {\n            console.log(`Explicitly updating stamp status for member ${memberId} to: ${stampIssued}`);\n            updateData.card_stamp_issued = stampIssued;\n          }\n          \n          // OPTIMIZACIJA: Prisma update umjesto UPDATE query\n          if (Object.keys(updateData).length > 0) {\n            await tx.membershipDetails.update({\n              where: { member_id: memberId },\n              data: updateData\n            });\n          }\n        }\n        \n        // OPTIMIZACIJA: Prisma deleteMany umjesto DELETE query\n        if (cardNumber !== undefined && cardNumber !== null && cardNumber.trim() !== \"\") {\n          await tx.password_update_queue.deleteMany({\n            where: {\n              member_id: memberId,\n              card_number: { not: cardNumber.trim() }\n            }\n          });\n          \n          console.log('Card number updated successfully');\n        }\n        \n        // OPTIMIZACIJA: Prisma findUnique umjesto SELECT query\n        const memberAfterUpdate = await tx.member.findUnique({\n          where: { member_id: memberId },\n          select: {\n            member_id: true,\n            full_name: true,\n            status: true,\n            registration_completed: true\n          }\n        });\n        \n        console.log('Member after all updates:', memberAfterUpdate);\n      });\n    } catch (error) {\n      console.error('Error updating card details:', error);\n      throw new Error(`Failed to update card details: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  },\n\n  async updateMembershipHistory(\n    memberId: number,\n    periods: MembershipPeriod[],\n    performerId?: number,\n    updateMemberStatus: boolean = false,\n    performerType?: PerformerType\n  ): Promise<void> {\n    try {\n      const member = await memberRepository.findById(memberId);\n      if (!member) throw new Error(\"Member not found\");\n\n      await membershipRepository.updateMembershipPeriods(memberId, periods);\n      \n      // Automatsko ažuriranje statusa člana na temelju perioda\n      if (updateMemberStatus) {\n        // Provjeri postoji li aktivni period (bez end_date)\n        const hasActivePeriod = periods.some(p => !p.end_date);\n        \n        if (hasActivePeriod) {\n          // Koristimo Prisma umjesto memberRepository za ažuriranje statusa\n          await prisma.member.update({\n            where: { member_id: memberId },\n            data: { status: 'registered' }\n          });\n          \n          if (performerId) {\n            await auditService.logAction(\n              \"UPDATE_MEMBER_HISTORY\",\n              performerId,\n              `Updated membership history for member ${memberId}`,\n              undefined,\n              \"success\",\n              memberId,\n              performerType\n            );\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating membership history:\", error);\n      throw error;\n    }\n  },\n\n  async updateMembership(\n    memberId: number,\n    payload: MembershipUpdatePayload,\n    performerId?: number,\n    performerType?: PerformerType\n  ): Promise<Member | null> {\n    const { paymentDate, cardNumber, stampIssued, isRenewalPayment } = payload;\n\n    if (paymentDate) {\n      await this.processFeePayment(\n        memberId,\n        parseDate(paymentDate),\n        performerId,\n        isRenewalPayment,\n        performerType\n      );\n    }\n\n    if (typeof cardNumber !== 'undefined' || typeof stampIssued !== 'undefined') {\n        await this.updateCardDetails(memberId, cardNumber, stampIssued, performerId);\n    }\n\n    return memberRepository.findById(memberId);\n  },\n\n  async terminateMembership(\n    memberId: number,\n    reason: MembershipEndReason,\n    performerId?: number,\n    endDateStr?: string,\n    performerType?: PerformerType\n  ): Promise<void> {\n    try {\n        const endDate = endDateStr ? parseDate(endDateStr) : getCurrentDate();\n        const currentPeriod = await membershipRepository.getCurrentPeriod(memberId);\n        if (currentPeriod) {\n            await membershipRepository.endMembershipPeriod(\n                currentPeriod.period_id,\n                endDate,\n                reason\n            );\n        }\n\n        await prisma.member.update({\n          where: { member_id: memberId },\n          data: { status: 'former_member' },\n        });\n\n        const details = await membershipRepository.getMembershipDetails(memberId);\n        if (details?.card_number) {\n            const cardNumberRepository = (await import('../repositories/cardnumber.repository.js')).default;\n            await cardNumberRepository.markCardNumberConsumed(details.card_number, memberId);\n        }\n\n        if (performerId) {\n          await auditService.logAction(\n            'TERMINATE_MEMBERSHIP',\n            performerId,\n            `Terminated membership for member ${memberId} with reason: ${reason}`,\n            undefined,\n            'success',\n            memberId,\n            performerType\n          );\n        }\n    } catch (error: unknown) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        throw new Error('Error terminating membership: ' + errorMessage);\n    }\n  },\n\n  async updateMembershipEndReason(\n    memberId: number,\n    periodId: number,\n    endReason: MembershipEndReason,\n    performerId?: number,\n    performerType?: PerformerType\n  ): Promise<void> {\n    try {\n      const member = await memberRepository.findById(memberId);\n      if (!member) throw new Error(\"Member not found\");\n  \n      const periods = await membershipRepository.getMembershipPeriods(memberId);\n      const periodToUpdate = periods.find(p => p.period_id === periodId);\n      \n      if (!periodToUpdate) {\n        throw new Error(\"Membership period not found\");\n      }\n      \n      await membershipRepository.updatePeriodEndReason(periodId, endReason);\n\n      if (performerId) {\n        await auditService.logAction(\n          'UPDATE_MEMBERSHIP_END_REASON',\n          performerId,\n          `Updated end reason for period ${periodId} for member ${memberId}`,\n          undefined,\n          'success',\n          memberId,\n          performerType\n        );\n      }\n    } catch (error) {\n      console.error(\"Error updating membership period end reason:\", error);\n      throw error;\n    }\n  },\n\n\n  async getMembershipHistory(memberId: number, req?: Request): Promise<{\n    periods: MembershipPeriod[];\n    totalDuration: string;\n    currentPeriod?: MembershipPeriod;\n  }> {\n    const periods = await membershipRepository.getMembershipPeriods(memberId);\n    const currentPeriod = periods.find((p: MembershipPeriod) => !p.end_date);\n\n    // Calculate total duration\n    let totalDays = 0;\n    periods.forEach((period: MembershipPeriod) => {\n      const end = period.end_date ? parseDate(period.end_date) : getCurrentDate();\n      const start = parseDate(period.start_date);\n      totalDays += Math.floor(\n        (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)\n      );\n    });\n\n    const years = Math.floor(totalDays / 365);\n    const months = Math.floor((totalDays % 365) / 30);\n    const days = totalDays % 30;\n\n    return {\n      periods,\n      totalDuration: `${years} years, ${months} months, ${days} days`,\n      currentPeriod,\n    };\n  },\n\n  async checkAutoTerminations(): Promise<void> {\n    try {\n      const currentYear = getCurrentDate().getFullYear();\n      const currentDate = getCurrentDate();\n\n      // Dohvati postavke sustava\n      const settings = await prisma.systemSettings.findFirst({\n        where: { id: \"default\" },\n      });\n\n      // Koristi postavke ili zadane vrijednosti\n      const cutoffMonth = settings?.renewalStartMonth || 10; // Default je studeni (10)\n      const cutoffDay = settings?.renewalStartDay || 1;\n\n      // Definiramo rok za obnovu članstva (1. ožujak tekuće godine)\n      const renewalDeadline = new Date(currentYear, 2, 1); // Mjesec 2 je ožujak\n\n      // Ako je trenutni datum nakon roka za obnovu, provjeri i završi sva članstva koja nisu obnovljena\n      if (currentDate > renewalDeadline) {\n        console.log(`INFO: Trenutni datum (${formatDate(currentDate)}) je nakon roka za obnovu članstva (${formatDate(renewalDeadline)}). Pokrećem provjeru isteklih članstava za ${currentYear}.`);\n        await membershipRepository.endExpiredMemberships(currentYear);\n      } else {\n        console.log(`INFO: Trenutni datum (${formatDate(currentDate)}) je prije roka za obnovu članstva (${formatDate(renewalDeadline)}). Preskačem provjeru.`);\n      }\n\n      return;\n    } catch (error) {\n      console.error(\"Greška prilikom automatske provjere članstava:\", error);\n      throw new Error(\n        `Greška prilikom automatske provjere članstava: ${\n          error instanceof Error ? error.message : \"Nepoznata greška\"\n        }`\n      );\n    }\n  },\n\n  async endMembershipPeriod(\n    periodId: number,\n    endDate: Date,\n    endReason: MembershipEndReason\n  ): Promise<MembershipPeriod> {\n    return await membershipRepository.endMembershipPeriod(\n      periodId,\n      endDate,\n      endReason\n    );\n  },\n};\n\nexport default membershipService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\message.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\permissions.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\scheduled.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\stamp.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":18,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":30,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import stampRepository from \"../repositories/stamp.repository.js\";\nimport membershipRepository from \"../repositories/membership.repository.js\";\nimport memberRepository from \"../repositories/member.repository.js\";\nimport auditService from \"./audit.service.js\";\nimport { DatabaseError } from \"../utils/errors.js\";\nimport { getCurrentDate } from '../utils/dateUtils.js';\nimport { PerformerType } from '@prisma/client';\n\nconst stampService = {\n  async getInventoryStatus() {\n    try {\n      // Dohvati inventar za sve godine\n      const inventory = await stampRepository.getInventory();\n      return inventory.map((item) => ({\n        ...item,\n        remaining: item.initial_count - item.issued_count,\n      }));\n    } catch (error) {\n      throw new DatabaseError(\"Error fetching stamp inventory\");\n    }\n  },\n\n  async getInventoryStatusByYear(year: number) {\n    try {\n      const inventory = await stampRepository.getInventoryByYear(year);\n      return inventory.map((item) => ({\n        ...item,\n        remaining: item.initial_count - item.issued_count,\n      }));\n    } catch (error) {\n      throw new DatabaseError(`Error fetching stamp inventory for year ${year}`);\n    }\n  },\n\n  async updateInitialCount(type: string, count: number, year: number) {\n    try {\n      if (count < 0) {\n        throw new Error(\"Initial count cannot be negative\");\n      }\n\n      const inventory = await stampRepository.getInventoryByYear(year);\n      const currentInventory = inventory.find(\n        (item) => item.stamp_type === type && item.stamp_year === year\n      );\n\n      if (currentInventory && count < currentInventory.issued_count) {\n        throw new Error(\"New count cannot be less than already issued stamps\");\n      }\n\n      await stampRepository.updateInventory(type, count, year);\n    } catch (error) {\n      throw new DatabaseError(\n        \"Error updating stamp inventory: \" +\n          (error instanceof Error ? error.message : \"Unknown error\")\n      );\n    }\n  },\n\n  // Helper function to safely map life status to stamp type\n  getStampTypeFromLifeStatus(lifeStatus: string | undefined): string {\n    if (!lifeStatus) {\n      return \"employed\"; // Default if missing\n    }\n\n    switch (lifeStatus) {\n      case \"employed/unemployed\":\n        return \"employed\";\n      case \"child/pupil/student\":\n        return \"student\";\n      case \"pensioner\":\n        return \"pensioner\";\n      default:\n        return \"employed\"; // Default fallback\n    }\n  },\n\n  async issueStamp(memberId: number, type: string, forNextYear: boolean = false) {\n    try {\n      // Validate stamp type\n      if (!type) {\n        throw new Error(\"Stamp type is required\");\n      }\n\n      // Determine which year stamp to use\n      const currentYear = getCurrentDate().getFullYear();\n      const stampYear = forNextYear ? currentYear + 1 : currentYear;\n\n      // Check if stamp is available in inventory\n      const inventory = await stampRepository.getInventoryByYear(stampYear);\n      const stampInventory = inventory.find(\n        (item) => item.stamp_type === type && item.stamp_year === stampYear\n      );\n\n      if (!stampInventory) {\n        throw new Error(`No inventory found for ${type} stamps for year ${stampYear}`);\n      }\n\n      // Check if there are enough stamps\n      if (stampInventory.initial_count <= stampInventory.issued_count) {\n        throw new Error(`No ${type} stamps available in inventory for year ${stampYear}`);\n      }\n\n      // Issue stamp and update inventory - za odgovarajuću godinu\n      await stampRepository.incrementIssuedCount(type, stampYear);\n      \n      // We'll handle the membership details update in the controller\n      console.log(`Stamp issued successfully for member: ${memberId}, type: ${type}, for year: ${stampYear}`);\n\n      return { success: true };\n    } catch (error) {\n      throw new DatabaseError(\n        \"Error issuing stamp: \" +\n          (error instanceof Error ? error.message : \"Unknown error\")\n      );\n    }\n  },\n\n  async returnStamp(type: string, memberId?: number, forNextYear: boolean = false) {\n    try {\n      // Determine which year stamp to return\n      const currentYear = getCurrentDate().getFullYear();\n      const stampYear = forNextYear ? currentYear + 1 : currentYear;\n      \n      // Update inventory (decrement issued count)\n      await stampRepository.decrementIssuedCount(type, stampYear);\n      \n      // We'll handle the membership details update in the controller\n      if (memberId) {\n        console.log(`Stamp returned for member: ${memberId}, type: ${type}, for year: ${stampYear}`);\n      }\n\n      return { success: true };\n    } catch (error) {\n      throw new DatabaseError(\n        \"Error returning stamp: \" +\n          (error instanceof Error ? error.message : \"Unknown error\")\n      );\n    }\n  },\n\n  async issueStampToMember(memberId: number, performerId: number, forNextYear: boolean = false, performerType?: PerformerType): Promise<void> {\n    try {\n      const member = await memberRepository.findById(memberId);\n      if (!member) {\n        throw new Error(\"Member not found\");\n      }\n\n      const stampType = this.getStampTypeFromLifeStatus(member.life_status);\n\n      // Poziv postojeće metode za ažuriranje inventara\n      await this.issueStamp(memberId, stampType, forNextYear);\n\n      // Ažuriranje detalja članstva\n      const fieldToUpdate = forNextYear\n        ? 'next_year_stamp_issued'\n        : 'card_stamp_issued';\n\n      await membershipRepository.updateMembershipDetails(memberId, { \n        [fieldToUpdate]: true \n      });\n\n      // Logiranje akcije\n      const stampYear = forNextYear ? getCurrentDate().getFullYear() + 1 : getCurrentDate().getFullYear();\n      await auditService.logAction(\n        'ISSUE_STAMP',\n        performerId,\n        `Issued ${stampType} stamp to member ${memberId} for year ${stampYear}`,\n        undefined,\n        'success',\n        memberId,\n        performerType\n      );\n    } catch (error) {\n      throw new DatabaseError(\n        \"Error issuing stamp to member: \" +\n          (error instanceof Error ? error.message : \"Unknown error\")\n      );\n    }\n  },\n\n  async getStampHistory() {\n    try {\n      return await stampRepository.getStampHistory();\n    } catch (error) {\n      console.error(\"Error fetching stamp history:\", error);\n      throw new DatabaseError(\n        \"Error fetching stamp history: \" +\n          (error instanceof Error ? error.message : \"Unknown error\")\n      );\n    }\n  },\n\n  async getStampHistoryByYear(year: number) {\n    try {\n      return await stampRepository.getStampHistoryByYear(year);\n    } catch (error) {\n      console.error(`Error fetching stamp history for year ${year}:`, error);\n      throw new DatabaseError(\n        `Error fetching stamp history for year ${year}: ` +\n          (error instanceof Error ? error.message : \"Unknown error\")\n      );\n    }\n  },\n\n  /**\n   * Nova metoda koja samo arhivira stanje markica za određenu godinu bez resetiranja.\n   * Ovo omogućuje arhiviranje stanja markica na kraju godine bez njihovog resetiranja.\n   */\n  async archiveStampInventory(year: number, memberId: number, notes: string = '', force: boolean = false) {\n    try {\n      // Provjera je li godina već arhivirana - preskačemo ovu provjeru ako je force=true\n      if (!force) {\n        const existingHistory = await stampRepository.getStampHistoryByYear(year);\n        if (existingHistory.length > 0) {\n          throw new Error(`Stamp inventory for year ${year} has already been archived`);\n        }\n      }\n\n      await stampRepository.archiveStampInventory(year, memberId, notes);\n      return { \n        success: true, \n        message: `Successfully archived stamp inventory for year ${year}` \n      };\n    } catch (error) {\n      console.error(\"Error during stamp inventory archiving:\", error);\n      throw new DatabaseError(\n        \"Error archiving stamp inventory: \" +\n          (error instanceof Error ? error.message : \"Unknown error\")\n      );\n    }\n  },\n\n  async archiveAndResetInventory(year: number, memberId: number, notes: string = '') {\n    try {\n      // Ova metoda je zastarjela, samo poziva novu metodu za arhiviranje bez resetiranja\n      console.warn(\"archiveAndResetInventory is deprecated, use archiveStampInventory instead\");\n      return await this.archiveStampInventory(year, memberId, notes);\n    } catch (error) {\n      console.error(\"Error during stamp inventory reset:\", error);\n      throw new DatabaseError(\n        \"Error resetting stamp inventory: \" +\n          (error instanceof Error ? error.message : \"Unknown error\")\n      );\n    }\n  },\n};\n\nexport default stampService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\statistics.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\systemHealth.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\systemManager.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\services\\timezone.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\activity.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\activity.types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\audit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\common.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\common.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\helpers\\membershipDisplay.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\helpers\\membershipDisplay.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\member.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\member.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\memberDetails.types.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\memberDetails.types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\memberStatus.types.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\memberStatus.types.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCurrentDate' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parseDate' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tipovi i funkcije za konzistentno određivanje statusa članstva\n * Ova datoteka služi kao centralno mjesto za definiranje logike statusa\n * i koristi se i na frontendu i na backendu\n */\n// Interne helper funkcije za rad s datumima\n// Definirane su ovdje kako bi shared tipovi bili neovisni\n/**\n * Vraća trenutni datum\n * @returns Trenutni datum kao Date objekt\n */\nfunction getCurrentDate() {\n    return new Date();\n}\n/**\n * Parsira datum iz različitih formata\n * @param date Datum kao string ili Date objekt\n * @returns Date objekt\n */\nfunction parseDate(date) {\n    if (date instanceof Date)\n        return date;\n    return new Date(date);\n}\n/**\n * Pomoćni adapter za konverziju originalnog MembershipPeriod tipa u naš MembershipPeriod tip\n * Ovo osigurava tipsku sigurnost prilikom korištenja različitih tipova u aplikaciji\n */\nexport function adaptMembershipPeriods(periods) {\n    return periods.map(period => ({\n        period_id: period.period_id,\n        start_date: period.start_date,\n        end_date: period.end_date ?? null,\n        end_reason: period.end_reason ?? null\n    }));\n}\n/**\n * Funkcija za dobivanje trenutne godine\n * Izdvojena kao zasebna funkcija za lakše testiranje i mockanje\n *\n * Napomena: U shared direktoriju koristimo direktno new Date() jer ne možemo\n * importati funkcije iz utils direktorija zbog TypeScript konfiguracije.\n * Kada se koristi na backendu, ova funkcija će koristiti sistemski datum,\n * a kada se koristi na frontendu, može se overridati s mock datumom.\n */\nexport function getCurrentYear() {\n    return new Date().getFullYear();\n}\n/**\n * Provjerava postoji li barem jedan period s end_date === null (aktivan period)\n * @param periods Lista perioda članstva\n * @returns true ako postoji barem jedan aktivan period, false inače\n */\nexport function hasActiveMembershipPeriod(periods) {\n    return periods.some(period => period.end_date === null);\n}\n/**\n * Provjera ima li član aktivne periode članstva\n * @param periods Lista perioda članstva\n * @returns true ako postoji barem jedan aktivan period, false inače\n */\nexport function hasActiveMembershipPeriods(periods) {\n    return periods.some(isMembershipPeriodActive);\n}\n/**\n * Određuje je li period članstva aktivan\n * @param period Period članstva za provjeru\n * @returns true ako je period aktivan, false inače\n */\nexport function isMembershipPeriodActive(period) {\n    return !period.end_date;\n}\n/**\n * Provjera je li član platio članarinu za tekuću ili sljedeću godinu\n * @param member Podaci o članu\n * @param currentYear Opcionalno, trenutna godina (za testiranje)\n * @returns true ako je članarina plaćena, false inače\n */\nexport function hasPaidMembershipFee(member, currentYear) {\n    const year = currentYear ?? getCurrentYear();\n    const paymentYear = member.membership_details?.fee_payment_year;\n    if (!paymentYear)\n        return false;\n    // Pravilno: || za logičku provjeru više uvjeta, ne ??\n    return paymentYear === year || paymentYear === year + 1;\n}\n/**\n * Određuje status plaćanja članarine (Fee Status)\n * @param member Podaci o članu\n * @param currentYear Opcionalno, trenutna godina (za testiranje)\n * @returns 'current' ako je članarina plaćena za tekuću ili sljedeću godinu, 'payment required' inače\n */\nexport function determineFeeStatus(member, currentYear) {\n    return hasPaidMembershipFee(member, currentYear) ? 'current' : 'payment required';\n}\n/**\n * Provjera da li je članarina plaćena za specifičnu godinu\n * @param member Podaci o članu\n * @param yearToCheck Godina za koju provjeravamo plaćanje\n * @returns true ako je članarina plaćena za specificiranu godinu, false inače\n */\nexport function isFeePaidForYear(member, yearToCheck) {\n    const paymentYear = member.membership_details?.fee_payment_year;\n    return paymentYear === yearToCheck;\n}\n/**\n * Određuje status aktivnosti člana na temelju broja odrađenih sati\n * @param member Podaci o članu\n * @returns 'active' ako član ima 20+ sati, 'passive' inače\n */\nexport function determineMemberActivityStatus(member) {\n    const totalHours = typeof member.total_hours === 'string'\n        ? parseFloat(member.total_hours)\n        : Number(member.total_hours ?? 0);\n    return totalHours >= 20 ? 'active' : 'passive';\n}\n/**\n * GLAVNI ALGORITAM: Određuje status članstva na temelju svih relevantnih faktora\n * Implementira logiku za određivanje statusa:\n *\n * @param member Podaci o članu\n * @param periods Lista perioda članstva\n * @param currentYear Opcionalno, trenutna godina (za testiranje)\n * @returns Status članstva\n */\nexport function determineMembershipStatus(member, periods, currentYear) {\n    // Koristimo unaprijeđenu funkciju i vraćamo samo status\n    return determineDetailedMembershipStatus(member, periods, currentYear).status;\n}\n/**\n * Unaprijeđena verzija funkcije za određivanje statusa koja vraća više detalja\n *\n * @param member Detalji o članu\n * @param periods Lista perioda članstva\n * @param currentYear Opcionalno, trenutna godina (za testiranje)\n * @returns Detaljan status članstva\n */\nexport function determineDetailedMembershipStatus(member, periods, currentYear) {\n    // Ako član ima broj iskaznice, smatra se registriranim članom\n    const hasCardNumber = !!member.card_number || !!member.membership_details?.card_number;\n    if (hasCardNumber) {\n        // Provjeri je li članarina plaćena\n        const hasPaidFee = hasPaidMembershipFee(member, currentYear);\n        if (!hasPaidFee) {\n            const year = currentYear ?? getCurrentYear();\n            return {\n                status: 'registered',\n                reason: `Članarina nije plaćena za ${year}. godinu`\n            };\n        }\n        // Član s brojem iskaznice i plaćenom članarinom\n        return {\n            status: 'registered',\n            reason: 'Članstvo važeće'\n        };\n    }\n    // Provjeri postoji li aktivan period članstva\n    const hasActivePeriod = hasActiveMembershipPeriod(periods);\n    if (!hasActivePeriod) {\n        // Za članove koji su u \"pending\" statusu (novi članovi)\n        if (member.status === 'pending') {\n            return {\n                status: 'pending',\n                reason: 'Registracija u tijeku'\n            };\n        }\n        // Za sve ostale bez aktivnog perioda\n        const lastEndedPeriod = findLastEndedPeriod(periods);\n        return {\n            status: 'inactive',\n            reason: 'Članstvo završeno',\n            date: lastEndedPeriod?.end_date,\n            endReason: lastEndedPeriod?.end_reason ?? 'other'\n        };\n    }\n    // Provjeri bazu podataka za eksplicitni 'inactive' status\n    if (member.status === 'inactive') {\n        return {\n            status: 'inactive',\n            reason: 'Neaktivan status u sustavu'\n        };\n    }\n    // Provjeri je li članarina plaćena\n    const hasPaidFee = hasPaidMembershipFee(member, currentYear);\n    if (!hasPaidFee) {\n        const year = currentYear ?? getCurrentYear();\n        return {\n            status: 'pending',\n            reason: `Članarina nije plaćena za ${year}. godinu`\n        };\n    }\n    // Ako ima aktivan period, ima plaćenu članarinu i nema eksplicitni 'inactive' status\n    return {\n        status: 'registered',\n        reason: 'Članstvo važeće'\n    };\n}\n/**\n * Pronalazi zadnji završeni period članstva\n * Korisno za prikaz informacija o razlogu završetka članstva\n *\n * @param periods Lista perioda članstva\n * @returns Zadnji završeni period ili null ako nema završenih perioda\n */\nexport function findLastEndedPeriod(periods) {\n    if (!periods || periods.length === 0)\n        return null;\n    // Kopiraj listu i sortiraj po datumu završetka (najnoviji prvo)\n    return [...periods]\n        .filter(p => p.end_date && p.end_reason)\n        .sort((a, b) => {\n        // TypeScript zaštita - već smo filtrirali null vrijednosti\n        const dateA = new Date(a.end_date);\n        const dateB = new Date(b.end_date);\n        return dateB.getTime() - dateA.getTime();\n    })[0] || null;\n}\n/**\n * Prevodi razlog završetka članstva u čitljivi oblik\n *\n * @param reason Razlog završetka članstva\n * @returns Čitljivi oblik razloga\n */\nexport function translateEndReason(reason) {\n    const translations = {\n        'withdrawal': 'Istupanje',\n        'expulsion': 'Isključenje',\n        'death': 'Smrt',\n        'inactivity': 'Neaktivnost',\n        'non_payment': 'Neplaćanje članarine',\n        'other': 'Ostalo'\n    };\n    return translations[reason] || reason;\n}\n/**\n * Dobiva čitljivi opis statusa članstva\n * @param status Detalji o statusu članstva ili string vrijednost statusa\n * @returns Čitljivi opis statusa\n */\nexport function getMembershipStatusDescription(status) {\n    // Ako je status string, pretvaramo ga u odgovarajući status objekt\n    if (typeof status === 'string') {\n        return getDescriptionFromStatusString(status);\n    }\n    // Ako objekt ima reason, vraćamo ga\n    if (status.reason) {\n        return status.reason;\n    }\n    // Inače vraćamo opis na temelju statusa\n    return getDescriptionFromStatusString(status.status);\n}\n/**\n * Pomoćna funkcija za dobivanje opisa na temelju stringa statusa\n */\nfunction getDescriptionFromStatusString(statusStr) {\n    switch (statusStr) {\n        case 'registered':\n            return 'Aktivan član';\n        case 'inactive':\n            return 'Neaktivan član';\n        case 'pending':\n            return 'Status na čekanju';\n        default:\n            return 'Nepoznat status';\n    }\n}\n//# sourceMappingURL=memberStatus.types.js.map","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\membership.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\membership.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\permissions.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\prisma-extensions.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\prisma-extensions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\settings.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\settings.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\settings.types.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\settings.types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\systemManager.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\dist\\systemManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}},{"ruleId":"no-new-symbol","replacedBy":["no-new-native-nonconstructor"],"info":{"message":"The rule was replaced with a more general rule.","url":"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended","deprecatedSince":"9.0.0","availableUntil":null,"replacedBy":[{"rule":{"name":"no-new-native-nonconstructor","url":"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\activity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\activity.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\audit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\common.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\helpers\\membershipDisplay.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\member.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\memberDetails.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\memberStatus.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\membership.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\prisma-extensions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\settings.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\shared\\types\\systemManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\types\\chai-extensions.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\types\\chai-http.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\types\\errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\types\\express.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\auditLog.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\controllerUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\memberMapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\memberMessageMapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\memberUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\prisma.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\sanitization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\scheduledTasks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\src\\utils\\validators.ts","messages":[],"suppressedMessages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":5,"column":26,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":5,"endColumn":27,"suggestions":[{"messageId":"removeEscape","fix":{"range":[277,278],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[277,277],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":5,"column":51,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeEscape","fix":{"range":[302,303],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[302,302],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]},{"filePath":"C:\\sinkronizacija\\promina-drnis-app\\backend\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/js/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/js/no-extra-semi"}}]}},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":["@stylistic/js/no-mixed-spaces-and-tabs"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-mixed-spaces-and-tabs","url":"https://eslint.style/rules/js/no-mixed-spaces-and-tabs"}}]}}]}]