generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SenderType {
  member
  member_administrator
  member_superuser
}

model Member {
  status                   String?                 @default("pending") @db.VarChar(50)
  date_of_birth            DateTime?               @db.Date
  oib                      String                  @unique @db.VarChar(11)
  cell_phone               String                  @db.VarChar(20)
  city                     String                  @db.VarChar(100)
  street_address           String                  @db.VarChar(200)
  email                    String?                 @db.VarChar(255)
  first_name               String                  @db.VarChar(100)
  last_name                String                  @db.VarChar(100)
  member_id                Int                     @id @default(autoincrement())
  password_hash            String?                 @db.VarChar(255)
  role                     String                  @default("member") @db.VarChar(20)
  last_login               DateTime?               @db.Timestamp(6)
  full_name                String                  @db.VarChar(100)
  life_status              String?                 @db.VarChar(25)
  tshirt_size              String?                 @db.VarChar(4)
  shell_jacket_size        String?                 @db.VarChar(4)
  total_hours              Decimal?                @default(0) @db.Decimal(10, 2)
  gender                   String?                 @db.VarChar(6)
  registration_completed   Boolean?                @default(false)
  profile_image_path       String?                 @db.VarChar(255)
  profile_image_updated_at DateTime?               @db.Timestamp(6)
  membership_type          String?                 @default("regular") @db.VarChar(20)
  created_at               DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?               @default(now()) @db.Timestamptz(6)
  nickname                 String?                 @db.VarChar(50)
  failed_login_attempts    Int                     @default(0)
  locked_until             DateTime?               @db.Timestamp(6)
  last_failed_login        DateTime?               @db.Timestamp(6)
  grantedPermissions       MemberPermissions[]      @relation("grantedByMemberPermissions")
  permissions              MemberPermissions?       @relation("memberPermissionsRelation")
  annual_statistics        AnnualStatistics[]
  affected_audits          AuditLog[]              @relation("AuditAffected")
  performed_audits         AuditLog[]              @relation("AuditPerformer")
  card_numbers             CardNumber[]
  messages                 MemberMessage[]
  membership_details       MembershipDetails?
  periods                  MembershipPeriod[]
  password_update_queue    password_update_queue[]
  refresh_tokens           refresh_tokens[]
  stamp_history            stamp_history[]

  @@index([full_name], map: "idx_members_full_name")
  @@index([oib], map: "idx_members_oib")
  @@index([total_hours], map: "idx_members_total_hours")
  @@map("members")
}

model ActivityType {
  type_id     Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(50)
  description String?
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  activities  Activity[]

  @@map("activity_types")
}

model Activity {
  activity_id           Int                   @id @default(autoincrement())
  title                 String                @db.VarChar(100)
  description           String?
  start_date            DateTime              @db.Timestamp(6)
  end_date              DateTime              @db.Timestamp(6)
  location              String?               @db.VarChar(100)
  difficulty_level      String?               @db.VarChar(20)
  max_participants      Int?
  created_by            Int?
  created_at            DateTime?             @default(now()) @db.Timestamp(6)
  activity_type_id      Int?
  activity_types        ActivityType?         @relation(fields: [activity_type_id], references: [type_id], onDelete: NoAction, onUpdate: NoAction)
  activity_participants ActivityParticipant[]

  @@index([start_date], map: "idx_activities_date")
  @@index([activity_type_id], map: "idx_activities_type")
  @@index([start_date], map: "idx_activities_start_date")
  @@map("activities")
}

model ActivityParticipant {
  participation_id      Int       @id @default(autoincrement())
  activity_id           Int?
  member_id             Int?
  hours_spent           Decimal   @db.Decimal(5, 2)
  role                  String?   @db.VarChar(50)
  notes                 String?
  verified_by           Int?
  verified_at           DateTime? @db.Timestamp(6)
  verified_by_member_id Int?
  activities            Activity? @relation(fields: [activity_id], references: [activity_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([activity_id], map: "idx_activity_participants_activity")
  @@index([hours_spent], map: "idx_activity_participants_hours")
  @@index([member_id], map: "idx_activity_participants_member")
  @@map("activity_participants")
}

model SystemSettings {
  id                String   @id @default("default")
  cardNumberLength  Int?     @default(5) @map("card_number_length")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  renewalStartDay   Int?     @default(1) @map("renewal_start_day")
  updatedBy         String   @default("system") @map("updated_by") @db.VarChar(255)
  renewalStartMonth Int?     @default(11) @map("renewal_start_month")
  timeZone          String?  @default("Europe/Zagreb") @map("time_zone")

  @@map("system_settings")
}

model MembershipDetails {
  member_id              Int       @id
  card_number            String?   @unique @db.VarChar(50)
  fee_payment_year       Int?
  card_stamp_issued      Boolean?  @default(false)
  fee_payment_date       DateTime? @db.Timestamp(6)
  next_year_stamp_issued Boolean?  @default(false)
  status                 String?   @default("active") @db.VarChar(20)
  active_until           DateTime? @db.Timestamp(6)
  member                 Member    @relation(fields: [member_id], references: [member_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("membership_details")
}

model MembershipPeriod {
  period_id    Int       @id @default(autoincrement())
  member_id    Int?
  start_date   DateTime  @db.Timestamp(6)
  end_date     DateTime? @db.Timestamp(6)
  end_reason   String?   @db.VarChar(20)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  is_test_data Boolean?  @default(false)
  membership   Member?   @relation(fields: [member_id], references: [member_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([is_test_data], map: "idx_membership_periods_test_data")
  @@map("membership_periods")
}

model StampInventory {
  id            Int       @id @default(autoincrement())
  stamp_type    String    @db.VarChar(20)
  initial_count Int       @default(0)
  issued_count  Int?      @default(0)
  remaining     Int?
  last_updated  DateTime? @default(now()) @db.Timestamp(6)
  stamp_year    Int?

  @@unique([stamp_type, stamp_year], name: "stamp_type_year_unique", map: "stamp_type_year_unique")
  @@map("stamp_inventory")
}

model MemberMessage {
  message_id     Int        @id @default(autoincrement())
  member_id      Int?
  message_text   String
  created_at     DateTime?  @default(now()) @db.Timestamp(6)
  read_at        DateTime?  @db.Timestamp(6)
  status         String?    @default("unread") @db.VarChar(20)
  sender_id      Int?
  recipient_id   Int?
  recipient_type String?    @default("member_administrator") @db.VarChar(20)
  sender_type    SenderType @default(member)
  member         Member?    @relation(fields: [member_id], references: [member_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("member_messages")
}

model AnnualStatistics {
  stat_id           Int       @id @default(autoincrement())
  member_id         Int?
  year              Int
  total_hours       Decimal   @db.Decimal(7, 2)
  total_activities  Int
  membership_status String    @db.VarChar(20)
  calculated_at     DateTime? @default(now()) @db.Timestamp(6)
  member            Member?   @relation(fields: [member_id], references: [member_id], onDelete: Cascade, onUpdate: NoAction, map: "annual_statistics_member_fkey")

  @@unique([member_id, year], map: "unique_member_year")
  @@index([member_id, year], map: "idx_annual_statistics_member_year")
  @@map("annual_statistics")
}

model AuditLog {
  log_id          Int       @id @default(autoincrement())
  action_type     String    @db.VarChar(50)
  performed_by    Int?
  action_details  String
  ip_address      String?   @db.VarChar(45)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  status          String?   @db.VarChar(20)
  affected_member Int?
  affected        Member?   @relation("AuditAffected", fields: [affected_member], references: [member_id], onUpdate: NoAction)
  performer       Member?   @relation("AuditPerformer", fields: [performed_by], references: [member_id], onUpdate: NoAction)

  @@map("audit_logs")
}

model Hours {
  id          Int      @id @default(autoincrement())
  activity_id Int
  date        DateTime @db.Timestamptz(6)
  hours       Int
  verified    Boolean? @default(false)
  createdAt   DateTime @db.Timestamptz(6)
  updatedAt   DateTime @db.Timestamptz(6)

  @@map("Hours")
}

model MemberAdministrator {
  id            Int       @id @default(autoincrement())
  username      String    @unique @db.VarChar(100)
  email         String    @unique @db.VarChar(255)
  display_name  String    @db.VarChar(100)
  password_hash String    @db.VarChar(255)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  last_login    DateTime? @db.Timestamp(6)

  @@map("member_administrator")
}

model MemberPermissions {
  permission_id          Int       @id @default(autoincrement())
  member_id              Int?      @unique
  
  // Ovlasti za članstvo
  can_view_members        Boolean?  @default(false)
  can_edit_members        Boolean?  @default(false)
  can_add_members         Boolean?  @default(false)
  can_manage_membership   Boolean?  @default(false)
  
  // Ovlasti za aktivnosti
  can_view_activities     Boolean?  @default(false)
  can_create_activities   Boolean?  @default(false)
  can_approve_activities  Boolean?  @default(false)
  
  // Financije
  can_view_financials     Boolean?  @default(false)
  can_manage_financials   Boolean?  @default(false)
  
  // Poruke
  can_send_group_messages Boolean?  @default(false)
  can_manage_all_messages Boolean?  @default(false)
  
  // Statistika
  can_view_statistics     Boolean?  @default(false)
  can_export_data         Boolean?  @default(false)
  
  // Specifične ovlasti
  can_manage_end_reasons  Boolean?  @default(false)
  can_manage_card_numbers Boolean?  @default(false)
  can_assign_passwords    Boolean?  @default(false)
  
  // Sustav
  granted_by              Int?
  granted_at              DateTime? @default(now()) @db.Timestamp(6)
  updated_at              DateTime? @default(now()) @db.Timestamp(6)
  
  grantedByMember         Member?   @relation("grantedByMemberPermissions", fields: [granted_by], references: [member_id], onDelete: NoAction, onUpdate: NoAction)
  member                  Member?   @relation("memberPermissionsRelation", fields: [member_id], references: [member_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([granted_by], map: "idx_member_permissions_granted_by")
  @@index([member_id], map: "idx_member_permissions_member")
  @@map("member_permissions")
}

model CardNumber {
  id          Int       @id @default(autoincrement())
  card_number String    @unique(map: "card_number_unique") @db.VarChar(20)
  status      String    @default("available") @db.VarChar(20)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  assigned_at DateTime? @db.Timestamptz(6)
  member_id   Int?
  members     Member?   @relation(fields: [member_id], references: [member_id], onUpdate: NoAction, map: "member_fk")

  @@index([member_id], map: "idx_card_numbers_member_id")
  @@index([status], map: "idx_card_numbers_status")
  @@map("card_numbers")
}

model password_update_queue {
  queue_id    Int       @id @default(autoincrement())
  member_id   Int
  card_number String    @db.VarChar(20)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  processed   Boolean?  @default(false)
  members     Member    @relation(fields: [member_id], references: [member_id], onDelete: NoAction, onUpdate: NoAction)
}

model stamp_history {
  id            Int      @id @default(autoincrement())
  year          Int
  stamp_type    String   @db.VarChar(50)
  initial_count Int
  issued_count  Int
  reset_date    DateTime @default(now()) @db.Timestamp(6)
  reset_by      Int?
  notes         String?
  stamp_year    Int
  members       Member?  @relation(fields: [reset_by], references: [member_id], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model members_backup {
  id             Int?
  name           String?   @db.VarChar(255)
  status         String?   @db.VarChar(50)
  date_of_birth  DateTime? @db.Date
  oib            String?   @db.VarChar(13)
  cell_phone     String?   @db.VarChar(20)
  city           String?   @db.VarChar(100)
  street_address String?   @db.VarChar(200)
  email          String?   @db.VarChar(255)
  first_name     String?   @db.VarChar(100)
  last_name      String?   @db.VarChar(100)
  member_id      String?   @db.VarChar(1000)

  @@ignore
}

model refresh_tokens {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  member_id  Int
  expires_at DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  members    Member   @relation(fields: [member_id], references: [member_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([member_id], map: "idx_refresh_tokens_member_id")
}

model system_admin {
  id            Int       @id @default(autoincrement())
  username      String    @unique @db.VarChar(50)
  email         String    @unique @db.VarChar(100)
  display_name  String    @db.VarChar(100)
  password_hash String    @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  last_login    DateTime? @db.Timestamp(6)
}
