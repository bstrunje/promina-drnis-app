==> Cloning from https://github.com/bstrunje/promina-drnis-app
==> Checking out commit 855bacc06e62e5b3a704328eea60f434b74533e3 in branch main
==> Downloading cache...
==> Transferred 199MB in 8s. Extraction took 3s.
==> Requesting Node.js version 20.x
==> Using Node.js version 20.18.3 via /opt/render/project/src/backend/package.json
==> Docs on specifying a Node.js version: https://render.com/docs/node-version
==> Using Bun version 1.1.0 (default)
==> Docs on specifying a bun version: https://render.com/docs/bun-version
==> Running build command 'npm install && npm run build'...
up to date, audited 339 packages in 3s
41 packages are looking for funding
  run `npm fund` for details
1 moderate severity vulnerability
To address all issues, run:
  npm audit fix
Run `npm audit` for details.
> @promina-drnis-app/backend@1.0.0 build
> tsc
==> Uploading build...
==> Uploaded in 4.9s. Compression took 1.9s
==> Build successful üéâ
==> Deploying...
==> Requesting Node.js version 20.x
==> Using Node.js version 20.18.3 via /opt/render/project/src/backend/package.json
==> Docs on specifying a Node.js version: https://render.com/docs/node-version
==> Running 'npm start'
> @promina-drnis-app/backend@1.0.0 start
> node dist/server.js
üèÉ Current directory: /opt/render/project/src/backend/dist
üìÅ Loading .env from: /opt/render/project/src/backend/dist/.env
‚öôÔ∏è  Environment configuration: {
  PORT: '10000 (Web Server)',
  DATABASE_URL: 'Set (Hidden for security)',
  JWT_SECRET: 'Set (Hidden for security)',
  NODE_ENV: 'production'
}
Error: SequelizeConnectionRefusedError
Error: SequelizeConnectionRefusedError
{
  query: '\n' +
    '            SELECT EXISTS (\n' +
    '                SELECT FROM information_schema.tables \n' +
    "                WHERE table_schema = 'public' \n" +
    '                AND table_name = $1\n' +
    '            )\n' +
    '        ',
  duration: 1462,
  rows: 1
}
Error setting character encoding: error: syntax error at or near ""UTF8""
    at /opt/render/project/src/node_modules/pg/lib/client.js:535:17
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async BoundPool.<anonymous> (file:///opt/render/project/src/backend/dist/utils/db.js:43:9) {
  length: 95,
  severity: 'ERROR',
  code: '42601',
  detail: undefined,
  hint: undefined,
  position: '11',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'scan.l',
  line: '1192',
  routine: 'scanner_yyerror'
}
{
  query: '\n' +
    '            SELECT EXISTS (\n' +
    '                SELECT FROM information_schema.tables \n' +
    "                WHERE table_schema = 'public' \n" +
    '                AND table_name = $1\n' +
    '            )\n' +
    '        ',
  duration: 10,
  rows: 1
}
{
  query: '\n' +
    '            SELECT EXISTS (\n' +
    '                SELECT FROM information_schema.tables \n' +
    "                WHERE table_schema = 'public' \n" +
    '                AND table_name = $1\n' +
    '            )\n' +
    '        ',
  duration: 4,
  rows: 1
}
{ query: 'BEGIN', duration: 3, rows: 0 }
{
  query: '\n' +
    '            CREATE TABLE IF NOT EXISTS members (\n' +
    '        member_id SERIAL PRIMARY KEY,\n' +
    "        status character varying(50) DEFAULT 'pending',\n" +
    '        date_of_birth date,\n' +
    '        oib character varying(11) NOT NULL,\n' +
    '        cell_phone character varying(20) NOT NULL,\n' +
    '        city character varying(100) NOT NULL,\n' +
    '        street_address character varying(200) NOT NULL,\n' +
    '        email character varying(255),\n' +
    '        first_name character varying(100) NOT NULL,\n' +
    '        last_name character varying(100) NOT NULL,\n' +
    '        life_status character varying(25),\n' +
    "        role character varying(20) DEFAULT 'member' NOT NULL,\n" +
    '        total_hours numeric(10,2) DEFAULT 0,\n' +
    "        full_name character varying(100) GENERATED ALWAYS AS ((((first_name)::text || ' '::text) || (last_name)::text)) STORED,\n" +
    '        tshirt_size character varying(4),\n' +
    '        shell_jacket_size character varying(4),\n' +
    "        CONSTRAINT life_status_check CHECK (life_status IN ('employed/unemployed', 'child/pupil/student', 'pensioner')),\n" +
    "        CONSTRAINT members_role_check CHECK (role IN ('member', 'admin', 'superuser'))\n" +
    '    );\n' +
    '        ',
  duration: 4,
  rows: 0
}
‚úÖ Members table created successfully
{
  query: '\n' +
    '            CREATE TABLE IF NOT EXISTS activity_types (\n' +
    '                type_id serial NOT NULL,\n' +
    '                name character varying(50) NOT NULL,\n' +
    '                description text,\n' +
    '                created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,\n' +
    '                CONSTRAINT activity_types_pkey PRIMARY KEY (type_id),\n' +
    '                CONSTRAINT activity_types_name_key UNIQUE (name)\n' +
    '            );\n' +
    '        ',
  duration: 5,
  rows: 0
}
‚úÖ Activity types table created successfully
{
  query: '\n' +
    '      DROP TABLE IF EXISTS stamp_inventory;\n' +
    '      \n' +
    '      CREATE TABLE stamp_inventory (\n' +
    '          id SERIAL PRIMARY KEY,\n' +
    '          stamp_type VARCHAR(20) NOT NULL,\n' +
    '          initial_count INTEGER NOT NULL DEFAULT 0,\n' +
    '          issued_count INTEGER DEFAULT 0,\n' +
    '          remaining INTEGER GENERATED ALWAYS AS (initial_count - issued_count) STORED,\n' +
    '          last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n' +
    "          CONSTRAINT stamp_type_check CHECK (stamp_type IN ('employed', 'student', 'pensioner')),\n" +
    '          CONSTRAINT stamp_type_unique UNIQUE (stamp_type)\n' +
    '      );\n' +
    '\n' +
    '      -- Ensure initial data exists\n' +
    '      INSERT INTO stamp_inventory (stamp_type, initial_count, issued_count) \n' +
    '      VALUES \n' +
    "          ('employed', 0, 0),\n" +
    "          ('student', 0, 0),\n" +
    "          ('pensioner', 0, 0)\n" +
    '      ON CONFLICT (stamp_type) DO NOTHING;\n' +
    '  ',
  duration: 64,
  rows: 0
}
‚úÖ Stamp inventory table created successfully
{
  query: '\n' +
    '            CREATE TABLE IF NOT EXISTS activities (\n' +
    '                activity_id serial NOT NULL,\n' +
    '                title character varying(100) NOT NULL,\n' +
    '                description text,\n' +
    '                start_date timestamp without time zone NOT NULL,\n' +
    '                end_date timestamp without time zone NOT NULL,\n' +
    '                location character varying(100),\n' +
    '                difficulty_level character varying(20),\n' +
    '                max_participants integer,\n' +
    '                created_by integer,\n' +
    '                created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,\n' +
    '                activity_type_id integer,\n' +
    '                CONSTRAINT activities_pkey PRIMARY KEY (activity_id),\n' +
    '                CONSTRAINT activities_activity_type_id_fkey FOREIGN KEY (activity_type_id)\n' +
    '                    REFERENCES activity_types (type_id)\n' +
    '            );\n' +
    '        ',
  duration: 4,
  rows: 0
}
‚úÖ Activities table created successfully
{
  query: '\n' +
    '            CREATE TABLE IF NOT EXISTS activity_participants (\n' +
    '                participant_id serial NOT NULL,\n' +
    '                activity_id integer NOT NULL,\n' +
    '                member_id integer NOT NULL,\n' +
    '                joined_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,\n' +
    '                CONSTRAINT activity_participants_pkey PRIMARY KEY (participant_id),\n' +
    '                CONSTRAINT activity_participants_activity_id_fkey FOREIGN KEY (activity_id)\n' +
    '                    REFERENCES activities (activity_id),\n' +
    '                CONSTRAINT activity_participants_member_id_fkey FOREIGN KEY (member_id)\n' +
    '                    REFERENCES members (member_id)\n' +
    '            );\n' +
    '        ',
  duration: 3,
  rows: 0
}
‚úÖ Activity participants table created successfully
{
  query: '\n' +
    '            CREATE TABLE IF NOT EXISTS audit_logs (\n' +
    '                log_id SERIAL PRIMARY KEY,\n' +
    '                action_type VARCHAR(50) NOT NULL,\n' +
    '                performed_by INTEGER REFERENCES members(member_id),\n' +
    '                action_details TEXT NOT NULL,\n' +
    '                ip_address VARCHAR(45),\n' +
    '                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n' +
    '                status VARCHAR(20),\n' +
    '                affected_member INTEGER REFERENCES members(member_id)\n' +
    '            );\n' +
    '        ',
  duration: 3,
  rows: 0
}
‚úÖ Audit logs table created successfully
{
  query: '\n' +
    '            CREATE TABLE IF NOT EXISTS annual_statistics (\n' +
    '                stat_id serial NOT NULL,\n' +
    '                member_id integer,\n' +
    '                year integer NOT NULL,\n' +
    '                total_hours numeric(7,2) NOT NULL,\n' +
    '                total_activities integer NOT NULL,\n' +
    '                membership_status character varying(20) NOT NULL,\n' +
    '                calculated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,\n' +
    '                CONSTRAINT annual_statistics_pkey PRIMARY KEY (stat_id),\n' +
    '                CONSTRAINT unique_member_year UNIQUE (member_id, year),\n' +
    '                CONSTRAINT annual_statistics_member_id_fkey FOREIGN KEY (member_id)\n' +
    '                    REFERENCES members (member_id)\n' +
    '            );\n' +
    '        ',
  duration: 3,
  rows: 0
}
‚úÖ Annual statistics table created successfully
{
  query: '\n' +
    '      CREATE TABLE IF NOT EXISTS member_messages (\n' +
    '          message_id SERIAL PRIMARY KEY,\n' +
    '          member_id INTEGER REFERENCES members(member_id),\n' +
    '          message_text TEXT NOT NULL,\n' +
    '          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n' +
    '          read_at TIMESTAMP,\n' +
    "          status VARCHAR(20) DEFAULT 'unread',\n" +
    "          CONSTRAINT status_values CHECK (status IN ('unread', 'read', 'archived'))\n" +
    '      );\n' +
    '  ',
  duration: 3,
  rows: 0
}
‚úÖ Member messages table created successfully
{
  query: '\n' +
    '            CREATE INDEX IF NOT EXISTS idx_activities_type \n' +
    '            ON activities(activity_type_id);\n' +
    '            \n' +
    '            CREATE INDEX IF NOT EXISTS idx_activity_participants_activity \n' +
    '            ON activity_participants(activity_id);\n' +
    '            \n' +
    '            CREATE INDEX IF NOT EXISTS idx_activity_participants_member \n' +
    '            ON activity_participants(member_id);\n' +
    '        ',
  duration: 3,
  rows: 0
}
‚úÖ Indexes created successfully
{
  query: '\n' +
    '            INSERT INTO activity_types (name, description)\n' +
    '            VALUES \n' +
    "                ('hiking', 'Mountain hiking activities'),\n" +
    "                ('climbing', 'Rock climbing activities'),\n" +
    "                ('training', 'Training and educational activities'),\n" +
    "                ('maintenance', 'Trail and equipment maintenance'),\n" +
    "                ('social', 'Social gatherings and meetings')\n" +
    '            ON CONFLICT (name) DO NOTHING;\n' +
    '        ',
  duration: 3,
  rows: 0
}
‚úÖ Default activity types created successfully
{
  query: '\n' +
    '    ALTER TABLE members \n' +
    '    ADD COLUMN IF NOT EXISTS profile_image_path VARCHAR(255);\n' +
    '  ',
  duration: 3,
  rows: 0
}
{
  query: '\n' +
    '    ALTER TABLE members \n' +
    '    ADD COLUMN IF NOT EXISTS profile_image_updated_at TIMESTAMP;\n' +
    '  ',
  duration: 3,
  rows: 0
}
{
  query: '\n' +
    '    ALTER TABLE members \n' +
    "    ADD COLUMN IF NOT EXISTS membership_type VARCHAR(20) DEFAULT 'regular' CHECK (membership_type IN ('regular', 'supporting', 'honorary'));\n" +
    '  ',
  duration: 3,
  rows: 0
}
{
  query: '\n' +
    '    ALTER TABLE members \n' +
    '    ADD COLUMN IF NOT EXISTS date_of_birth DATE;\n' +
    '  ',
  duration: 3,
  rows: 0
}
{ query: 'COMMIT', duration: 4, rows: 0 }
‚úÖ Database setup completed successfully
‚úÖ Database setup completed
{ query: 'SELECT 1', duration: 4, rows: 1 }
‚úÖ Database connection successful
Database already initialized, skipping setup
üöÄ Server is running:
   Local:            http://localhost:10000
   Documentation:    http://localhost:10000/api-docs
   Health Check:     http://localhost:10000/health
   Environment:      production
[2/24/2025, 24:23:02] HEAD /
HEAD / 200 15.882 ms - 73
==> Your service is live üéâ